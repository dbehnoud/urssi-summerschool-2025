[
  {
    "objectID": "package_structure-revealjs.html#who-am-i",
    "href": "package_structure-revealjs.html#who-am-i",
    "title": "(re)introducing Python packaging",
    "section": "Who am I?",
    "text": "Who am I?\n\nPhD: neuro + behavior, post-doc: cognition\nopen source scientific software dev: http://www.vocalpy.org/\ntrained Carpentries instructor\npyOpenSci (2018-present; Editor in Chief - ~2022-2024)\nparticipant in URSSI 2019 Winter School!\nChair, SciPy conference (2020-present)\nActive in US Research Software Engineer Association"
  },
  {
    "objectID": "package_structure-revealjs.html#acknowledgements",
    "href": "package_structure-revealjs.html#acknowledgements",
    "title": "(re)introducing Python packaging",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nThe previous versions of this module!\nPython packaging 101 tutorial from pyOpenSci: https://www.pyopensci.org/python-package-guide/tutorials/intro.html#python-packaging-101\nPython Packages: https://py-pkgs.org/\nScientific Python packaging guide: https://learn.scientific-python.org/development/tutorials/packaging/\nPython Packaging User Guide: https://packaging.python.org/en/latest/"
  },
  {
    "objectID": "package_structure-revealjs.html#outline-questions",
    "href": "package_structure-revealjs.html#outline-questions",
    "title": "(re)introducing Python packaging",
    "section": "Outline / Questions",
    "text": "Outline / Questions\n(The answers come later)\n\nWhat is a Python package?\nWhy would I make a Python package?\nHow do I turn my code into a Python package that I can import?\nHow do I publish my Python package so others can pip install it?\nWhat do I need to develop and maintain a Python package, besides code?"
  },
  {
    "objectID": "package_structure-revealjs.html#what-is-a-python-package",
    "href": "package_structure-revealjs.html#what-is-a-python-package",
    "title": "(re)introducing Python packaging",
    "section": "What is a Python package?",
    "text": "What is a Python package?\nFirst, let’s define module\nhttps://docs.python.org/3/glossary.html#term-module\n\nModule: An object that serves an organizational unit of python code. Modules have a namespace containing arbitrary python objects. Modules are loaded into Python by the process of importing"
  },
  {
    "objectID": "package_structure-revealjs.html#section",
    "href": "package_structure-revealjs.html#section",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Deconstructing that definition:\n\nWhen I write import modulename I am loading a module\n\nBut we also talk about “importing a package”!\nThis seems to imply a package is a kind of module"
  },
  {
    "objectID": "package_structure-revealjs.html#aside-why-does-python-have-modules",
    "href": "package_structure-revealjs.html#aside-why-does-python-have-modules",
    "title": "(re)introducing Python packaging",
    "section": "Aside: why does Python have modules?",
    "text": "Aside: why does Python have modules?\nBecause it’s good for your code to be modular.\n\nImage credit: https://realpython.com/python-modules-packages/"
  },
  {
    "objectID": "package_structure-revealjs.html#where-do-modules-come-from",
    "href": "package_structure-revealjs.html#where-do-modules-come-from",
    "title": "(re)introducing Python packaging",
    "section": "Where do modules come from?",
    "text": "Where do modules come from?\n\nThe standard library\n\nPython code\nCompiled C code\n\nA local file that ends in .py\n\n(confusingly, also called a “module”)\n\nThird-party libraries that you pip install or conda install\n\ni.e., packages\n\nA local package (we’re getting to this)"
  },
  {
    "objectID": "package_structure-revealjs.html#what-is-a-python-package-1",
    "href": "package_structure-revealjs.html#what-is-a-python-package-1",
    "title": "(re)introducing Python packaging",
    "section": "What is a Python package?",
    "text": "What is a Python package?\nOk, now that we spent all that time defining module, we can finally define package\n“A Python module which can contain submodules or recursively, subpackages.”\nhttps://docs.python.org/3/glossary.html#term-package"
  },
  {
    "objectID": "package_structure-revealjs.html#package-can-have-multiple-meanings",
    "href": "package_structure-revealjs.html#package-can-have-multiple-meanings",
    "title": "(re)introducing Python packaging",
    "section": "“Package” can have multiple meanings!",
    "text": "“Package” can have multiple meanings!\nTwo main usages:\nhttps://packaging.python.org/en/latest/discussions/distribution-package-vs-import-package/"
  },
  {
    "objectID": "package_structure-revealjs.html#two-types-of-packages-import-package",
    "href": "package_structure-revealjs.html#two-types-of-packages-import-package",
    "title": "(re)introducing Python packaging",
    "section": "Two types of packages: import package",
    "text": "Two types of packages: import package\nThis is the one we already talked about\nThe thing you get when you write import packagename in your code\nWe’re going to show you how to make one of these first"
  },
  {
    "objectID": "package_structure-revealjs.html#two-types-of-packages-distribution-package",
    "href": "package_structure-revealjs.html#two-types-of-packages-distribution-package",
    "title": "(re)introducing Python packaging",
    "section": "Two types of packages: distribution package",
    "text": "Two types of packages: distribution package\nThe actual artifact that gets downloaded off the internet and stored on your computer somewhere\nlike when you run pip install package\nWe need to learn how to make one of these too!"
  },
  {
    "objectID": "package_structure-revealjs.html#why-would-i-make-a-python-package",
    "href": "package_structure-revealjs.html#why-would-i-make-a-python-package",
    "title": "(re)introducing Python packaging",
    "section": "Why would I make a Python package?",
    "text": "Why would I make a Python package?"
  },
  {
    "objectID": "package_structure-revealjs.html#section-1",
    "href": "package_structure-revealjs.html#section-1",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Fame, glory\n$$$\nPor amor al arte"
  },
  {
    "objectID": "package_structure-revealjs.html#when-should-i-turn-my-code-into-a-package",
    "href": "package_structure-revealjs.html#when-should-i-turn-my-code-into-a-package",
    "title": "(re)introducing Python packaging",
    "section": "When should I turn my code into a package?",
    "text": "When should I turn my code into a package?\nTwo common cases for research code:\n\nCode that goes with a research article\n\nmainly used to reproduce the results\nAKA a (computational) project or a research compendium\n\nA generalized tool or library that other researchers can use"
  },
  {
    "objectID": "package_structure-revealjs.html#packaging-code-for-a-paper",
    "href": "package_structure-revealjs.html#packaging-code-for-a-paper",
    "title": "(re)introducing Python packaging",
    "section": "Packaging code for a paper",
    "text": "Packaging code for a paper\n\nYou have multiple scripts that use the same function\nSo you want to be able to import that function\nIt’s sufficient for you to make an “import package” you use in scripts (e.g., in a Jupyter notebook)"
  },
  {
    "objectID": "package_structure-revealjs.html#to-share-a-generalized-tool",
    "href": "package_structure-revealjs.html#to-share-a-generalized-tool",
    "title": "(re)introducing Python packaging",
    "section": "To share a generalized tool",
    "text": "To share a generalized tool\nThis is what we’re here (mostly) to learn about!\nThis is when we want to make a “distribution package” too!\n\nYou want people to be able to pip install awesometool"
  },
  {
    "objectID": "package_structure-revealjs.html#how-do-i-turn-my-code-into-a-python-package-i-can-import",
    "href": "package_structure-revealjs.html#how-do-i-turn-my-code-into-a-python-package-i-can-import",
    "title": "(re)introducing Python packaging",
    "section": "How do I turn my code into a Python package I can import?",
    "text": "How do I turn my code into a Python package I can import?"
  },
  {
    "objectID": "package_structure-revealjs.html#the-structure-of-a-python-package",
    "href": "package_structure-revealjs.html#the-structure-of-a-python-package",
    "title": "(re)introducing Python packaging",
    "section": "The structure of a Python package",
    "text": "The structure of a Python package\nThe simplest possible Python package\n\nA directory with a single file in it named __init__.py\n\nThe file can be empty\n\nThe __init__.py file tells Python that “this directory is a package"
  },
  {
    "objectID": "package_structure-revealjs.html#how-can-i-import-my-own-code",
    "href": "package_structure-revealjs.html#how-can-i-import-my-own-code",
    "title": "(re)introducing Python packaging",
    "section": "How can I import my own code?",
    "text": "How can I import my own code?\nThis is enough for me to be able to import the package\nas long as I’m in the right directory\n\nThe same is true for any module:\n(by which we mean a file that ends in .py)\nI can import it if I’m in the right directory"
  },
  {
    "objectID": "package_structure-revealjs.html#how-do-i-make-it-so-i-can-import-a-module",
    "href": "package_structure-revealjs.html#how-do-i-make-it-so-i-can-import-a-module",
    "title": "(re)introducing Python packaging",
    "section": "How do I make it so I can import a module?",
    "text": "How do I make it so I can import a module?\nThis is the bare minimum pyproject.toml file for our simple module"
  },
  {
    "objectID": "package_structure-revealjs.html#what-is-a-toml-file",
    "href": "package_structure-revealjs.html#what-is-a-toml-file",
    "title": "(re)introducing Python packaging",
    "section": "What is a TOML file?",
    "text": "What is a TOML file?\n\n\n“Tom’s Obvious Minimal Language”: https://toml.io/en/\n\n“A [configuration] file format for humans”\n\nUsed in other ecosystems\nNice because parsers map to native type"
  },
  {
    "objectID": "package_structure-revealjs.html#anatomy-of-a-toml-file",
    "href": "package_structure-revealjs.html#anatomy-of-a-toml-file",
    "title": "(re)introducing Python packaging",
    "section": "Anatomy of a TOML file",
    "text": "Anatomy of a TOML file\n\n\n\nthe spec: https://toml.io/en/v1.0.0"
  },
  {
    "objectID": "package_structure-revealjs.html#ok-i-have-a-pyproject.toml-file-now-what",
    "href": "package_structure-revealjs.html#ok-i-have-a-pyproject.toml-file-now-what",
    "title": "(re)introducing Python packaging",
    "section": "Ok, I have a pyproject.toml file, now what?",
    "text": "Ok, I have a pyproject.toml file, now what?\nNow just\n\nnavigate to the directory where your module lives\nactivate your virtual environment\ntype pip install .\nnow you can import it!"
  },
  {
    "objectID": "package_structure-revealjs.html#a-slightly-more-complicated-python-package",
    "href": "package_structure-revealjs.html#a-slightly-more-complicated-python-package",
    "title": "(re)introducing Python packaging",
    "section": "A (slightly) more complicated Python package",
    "text": "A (slightly) more complicated Python package\n\nScenario: Samspon is a computational dog scientist.\nSampson has a set of functions they are using across all their projects, so they wrap them up in a package, dogpy\n\n\n\nwww.rexspecs.com/blogs/news/sampson-the-lab-dog-tests-the-boundaries-of-science"
  },
  {
    "objectID": "package_structure-revealjs.html#why-src",
    "href": "package_structure-revealjs.html#why-src",
    "title": "(re)introducing Python packaging",
    "section": "Why src?",
    "text": "Why src?\n\nSo you don’t accidentally import the local package when you want to run tests on the distribution package\nAesthetics: it looks better to have “src”, “docs”, “tests”"
  },
  {
    "objectID": "package_structure-revealjs.html#the-package-itself",
    "href": "package_structure-revealjs.html#the-package-itself",
    "title": "(re)introducing Python packaging",
    "section": "The package itself",
    "text": "The package itself\n\nWe have the dogpy dir\nIt contains one module (by which I mean a .py file): bark.py\nIt also contains another directory! The elusive sub-package. Namely, fetch.\nThe fetch sub-package contains two other modules: ball.py and bone.py"
  },
  {
    "objectID": "package_structure-revealjs.html#why-__init__.py-anyways",
    "href": "package_structure-revealjs.html#why-__init__.py-anyways",
    "title": "(re)introducing Python packaging",
    "section": "Why __init__.py anyways?",
    "text": "Why __init__.py anyways?\n\nIt initializes your module\nYou import modules, functions, etc., here\nso that your users can get what they need from your package’s namespace"
  },
  {
    "objectID": "package_structure-revealjs.html#how-should-i-structure-my-python-package",
    "href": "package_structure-revealjs.html#how-should-i-structure-my-python-package",
    "title": "(re)introducing Python packaging",
    "section": "How should I structure my Python package?",
    "text": "How should I structure my Python package?\n\nShort version: “flat is better than nested”\n\nYour users want to write package.function, not package.subpackage.subsubpackage.subsubsubpackage.function\nBut having one level of sub-packages can help with readability\nMost scientific Python packages have a set of sub-packages, each containing functions:\n\nnumpy.random.default_rng\nsklearn.model_selection.test_train_split\n\nYour package’s code ≠ your package’s namespace! You control the namespace with imports!\n\nLong version:\n\nhttps://benhoyt.com/writings/python-api-design/\nhttp://blog.nicholdav.info/four-tips-structuring-research-python/"
  },
  {
    "objectID": "package_structure-revealjs.html#how-do-i-publish-my-package-so-others-can-pip-install-it",
    "href": "package_structure-revealjs.html#how-do-i-publish-my-package-so-others-can-pip-install-it",
    "title": "(re)introducing Python packaging",
    "section": "How do I publish my package so others can pip install it?",
    "text": "How do I publish my package so others can pip install it?"
  },
  {
    "objectID": "package_structure-revealjs.html#how-do-i-publish-my-package",
    "href": "package_structure-revealjs.html#how-do-i-publish-my-package",
    "title": "(re)introducing Python packaging",
    "section": "How do I publish my package?",
    "text": "How do I publish my package?\nNow we need a distribution package.\nWe also need to define some more terms so that the rest of this make sense."
  },
  {
    "objectID": "package_structure-revealjs.html#what-about-setup.py",
    "href": "package_structure-revealjs.html#what-about-setup.py",
    "title": "(re)introducing Python packaging",
    "section": "What about setup.py?",
    "text": "What about setup.py?\n\nIt used to be the case that all distributions were built with a setup.py file\nThere was only one tool that did this: setuptools\nNow: pure Python projects don’t need a setup.py file It’s better\n\n\nThe long version:\nhttps://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html"
  },
  {
    "objectID": "package_structure-revealjs.html#distribution-packages-frontends-and-backends",
    "href": "package_structure-revealjs.html#distribution-packages-frontends-and-backends",
    "title": "(re)introducing Python packaging",
    "section": "Distribution packages: frontends and backends",
    "text": "Distribution packages: frontends and backends\nTo move away from setup.py and setuptools, PEP 517 introduced the idea of “front-ends” and “back-ends”\nhttps://peps.python.org/pep-0517/\nMostly you shouldn’t have to think about this.\nBut in your pyproject.toml file you will specify a “build backend”.\nThat’s the tool that knows how to take your “source tree” and make a distribution package."
  },
  {
    "objectID": "package_structure-revealjs.html#distribution-packages-formats",
    "href": "package_structure-revealjs.html#distribution-packages-formats",
    "title": "(re)introducing Python packaging",
    "section": "Distribution packages: formats",
    "text": "Distribution packages: formats\n“Build backends” (always) make two types of distribution packages:\na source distribution (“sdist”), and wheels\nhttps://packaging.python.org/en/latest/discussions/package-formats/"
  },
  {
    "objectID": "package_structure-revealjs.html#how-do-i-publish-my-package-1",
    "href": "package_structure-revealjs.html#how-do-i-publish-my-package-1",
    "title": "(re)introducing Python packaging",
    "section": "How do I publish my package?",
    "text": "How do I publish my package?\nTo-do list:\n\nAdd metadata to our pyproject.toml file\n\nBuild backend\nThe metadata that will show up on PyPI\n\nBuild your distribution package\nPublish the distribution package to PyPI"
  },
  {
    "objectID": "package_structure-revealjs.html#python-packaging-feels-like-a-lot-of-work",
    "href": "package_structure-revealjs.html#python-packaging-feels-like-a-lot-of-work",
    "title": "(re)introducing Python packaging",
    "section": "Python packaging feels like a lot of work!",
    "text": "Python packaging feels like a lot of work!\n“I have to write this pyproject.toml file by hand, make and virtual environments, and I don’t even know how much work it will take to build a distribution package yet…”\nGood news!\nThere are packaging tools that will do a lot of this work for you!"
  },
  {
    "objectID": "package_structure-revealjs.html#python-packaging-feels-like-a-lot-of-work-1",
    "href": "package_structure-revealjs.html#python-packaging-feels-like-a-lot-of-work-1",
    "title": "(re)introducing Python packaging",
    "section": "Python packaging feels like a lot of work!",
    "text": "Python packaging feels like a lot of work!\nThe not so good news: there are many different tools\nhttps://pradyunsg.me/blog/2023/01/21/thoughts-on-python-packaging/\nHere’s two options:\n\nLightweight: flit– https://flit.pypa.io/en/stable/\nSwiss army knife: hatch – https://hatch.pypa.io/"
  },
  {
    "objectID": "package_structure-revealjs.html#pyproject.toml-metadata-build-system",
    "href": "package_structure-revealjs.html#pyproject.toml-metadata-build-system",
    "title": "(re)introducing Python packaging",
    "section": "pyproject.toml metadata: [build-system]",
    "text": "pyproject.toml metadata: [build-system]\nTo build our distribution package, we need a build system.\nWe declare this in a build-system table."
  },
  {
    "objectID": "package_structure-revealjs.html#pyproject.toml-project-metadata",
    "href": "package_structure-revealjs.html#pyproject.toml-project-metadata",
    "title": "(re)introducing Python packaging",
    "section": "pyproject.toml project metadata",
    "text": "pyproject.toml project metadata\n\n\nGood explainer in flit docs:\nhttps://flit.pypa.io/en/latest/ pyproject_toml.html#new-style-metadata"
  },
  {
    "objectID": "package_structure-revealjs.html#aside-python-requires-and-dependencies",
    "href": "package_structure-revealjs.html#aside-python-requires-and-dependencies",
    "title": "(re)introducing Python packaging",
    "section": "Aside: python-requires and dependencies",
    "text": "Aside: python-requires and dependencies\n\nYou should know about SPEC0, that specifies what versions of Python the core scientific packages work with: https://scientific-python.org/specs/spec-0000/\nUsually you don’t want to put upper bounds (&gt;3.6, &lt;4.0) on Python or your dependencies: https://iscinumpy.dev/post/bound-version-constraints/"
  },
  {
    "objectID": "package_structure-revealjs.html#building-distribution-packages",
    "href": "package_structure-revealjs.html#building-distribution-packages",
    "title": "(re)introducing Python packaging",
    "section": "Building distribution packages",
    "text": "Building distribution packages\nMost packaging tools have some sort of build command"
  },
  {
    "objectID": "package_structure-revealjs.html#publishing-to-pypi",
    "href": "package_structure-revealjs.html#publishing-to-pypi",
    "title": "(re)introducing Python packaging",
    "section": "Publishing to PyPI",
    "text": "Publishing to PyPI\nMost packaging tools have some sort of publish command"
  },
  {
    "objectID": "package_structure-revealjs.html#what-do-i-need-to-develop-and-maintain-a-python-package-besides-code",
    "href": "package_structure-revealjs.html#what-do-i-need-to-develop-and-maintain-a-python-package-besides-code",
    "title": "(re)introducing Python packaging",
    "section": "What do I need to develop and maintain a Python package, besides code?",
    "text": "What do I need to develop and maintain a Python package, besides code?"
  },
  {
    "objectID": "package_structure-revealjs.html#what-else-do-i-need-besides-code",
    "href": "package_structure-revealjs.html#what-else-do-i-need-besides-code",
    "title": "(re)introducing Python packaging",
    "section": "What else do I need besides code?",
    "text": "What else do I need besides code?\nInfrastructure:\nAll the other stuff besides code that makes it easier for\n\nyou to develop and maintain your package\nothers to use your package, give you feedback, and contribute"
  },
  {
    "objectID": "package_structure-revealjs.html#readme",
    "href": "package_structure-revealjs.html#readme",
    "title": "(re)introducing Python packaging",
    "section": "README",
    "text": "README\n\n\n\nOften the first thing people see\nGitHub shows this by default -www.makeareadme.com/"
  },
  {
    "objectID": "package_structure-revealjs.html#license",
    "href": "package_structure-revealjs.html#license",
    "title": "(re)introducing Python packaging",
    "section": "LICENSE",
    "text": "LICENSE\nYou are giving other people permission to use your code\n\nhttps://choosealicense.com/\nMIT and BSD are common for open source scientific software\nMore on this later!"
  },
  {
    "objectID": "package_structure-revealjs.html#code-of-conduct",
    "href": "package_structure-revealjs.html#code-of-conduct",
    "title": "(re)introducing Python packaging",
    "section": "Code of conduct",
    "text": "Code of conduct\n\nEstablishes expectations for behavior\nHelps create inclusive community\nhttps://opensource.guide/code-of-conduct/\nHighly suggest looking at other scientific Python projects: https://docs.scipy.org/doc/scipy/dev/conduct/ code_of_conduct.html#endnotes"
  },
  {
    "objectID": "package_structure-revealjs.html#changelog",
    "href": "package_structure-revealjs.html#changelog",
    "title": "(re)introducing Python packaging",
    "section": "CHANGELOG",
    "text": "CHANGELOG\nHuman-readable record of changes to your project\nhttps://keepachangelog.com/en/1.1.0/"
  },
  {
    "objectID": "package_structure-revealjs.html#issue-tracker",
    "href": "package_structure-revealjs.html#issue-tracker",
    "title": "(re)introducing Python packaging",
    "section": "Issue tracker",
    "text": "Issue tracker"
  },
  {
    "objectID": "package_structure-revealjs.html#continuous-integration",
    "href": "package_structure-revealjs.html#continuous-integration",
    "title": "(re)introducing Python packaging",
    "section": "Continuous integration",
    "text": "Continuous integration"
  },
  {
    "objectID": "package_structure-revealjs.html#docs-tests-etc.",
    "href": "package_structure-revealjs.html#docs-tests-etc.",
    "title": "(re)introducing Python packaging",
    "section": "Docs, tests, etc.,",
    "text": "Docs, tests, etc.,\nTo be discussed in later modules"
  },
  {
    "objectID": "package_structure-revealjs.html#python-packaging-questions-comments",
    "href": "package_structure-revealjs.html#python-packaging-questions-comments",
    "title": "(re)introducing Python packaging",
    "section": "Python packaging: Questions & Comments",
    "text": "Python packaging: Questions & Comments"
  },
  {
    "objectID": "package_structure.html",
    "href": "package_structure.html",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "The previous versions of this module!\nPython packaging 101 tutorial from pyOpenSci: https://www.pyopensci.org/python-package-guide/tutorials/intro.html#python-packaging-101\nPython Packages: https://py-pkgs.org/\nScientific Python packaging guide: https://learn.scientific-python.org/development/tutorials/packaging/\nPython Packaging User Guide: https://packaging.python.org/en/latest/\n\n\n\n\nFirst, let’s define module\nhttps://docs.python.org/3/glossary.html#term-module\n\nModule: An object that serves an organizational unit of python code. Modules have a namespace containing arbitrary python objects. Modules are loaded into Python by the process of importing\n\n\n\n\nDeconstructing that definition:\n\nWhen I write import modulename I am loading a module\n\nBut we also talk about “importing a package”!\nThis seems to imply a package is a kind of module\n\n\n\n\nThe module can contain “arbitrary Python objects”\n\nThat could include other modules!\nIt’s almost like we need a special name for a “module that can contain other modules”!\n\n\n\n\nWhen I load the module, its name gets added to the namespace\n\nnamespace: a collection of currently defined names and the objects they reference\nSo now I can use the module name to access things inside of it with dot notation, like another module that contains a function: numpy.random.default_rng\n\n\n\n\n\n\nThe standard library\n\nPython code\nCompiled C code\n\nA local file that ends in .py\n\n(confusingly, also called a “module”)\n\nThird-party libraries that you pip install or conda install\n\ni.e., packages\n\nA local package (we’re getting to this)\n\n\n\n\nOk, now that we spent all that time defining module, we can finally define package\n“A Python module which can contain submodules or recursively, subpackages.”\nhttps://docs.python.org/3/glossary.html#term-package\n\n\n\nTwo main usages:\nhttps://packaging.python.org/en/latest/discussions/distribution-package-vs-import-package/\n\n\n\nThis is the one we already talked about\nThe thing you get when you write import packagename in your code\nWe’re going to show you how to make one of these first\n\n\n\nThe actual artifact that gets downloaded off the internet and stored on your computer somewhere\nlike when you run pip install package\nWe need to learn how to make one of these too!\n\n\n\n\n\n\nTwo common cases for research code:\n\nCode that goes with a research article\n\nmainly used to reproduce the results\nAKA a (computational) project or a research compendium\n\nA generalized tool or library that other researchers can use\n\n\n\n\n\nYou have multiple scripts that use the same function\nSo you want to be able to import that function\nIt’s sufficient for you to make an “import package” you use in scripts (e.g., in a Jupyter notebook)\n\n\n\nThis kind of package does not necessarily need all the infrastructure you will learn about in this workshop\n\nsuch as: its own rendered website with documentation\n\nIf someone uses the code for your paper, they will get a copy of the code and set it up so they can import the same way; they don’t expect to pip install paper\n\n\nFor more on projects and research compendia in general, see\n\n“Good enough practices in scientific computing”\n“How repro-packs can save your future self”\nTuring Way guide: https://book.the-turing-way.org/reproducible-research/compendia\nKarthik’s talk: https://github.com/karthik/rstudio2019\n\n\n\n\nThis is what we’re here (mostly) to learn about!\nThis is when we want to make a “distribution package” too!\n\nYou want people to be able to pip install awesometool\n\n\n\n\n\n\n\nThe simplest possible Python package\n\nA directory with a single file in it named __init__.py\n\nThe file can be empty\n\nThe __init__.py file tells Python that “this directory is a package\n\n\n\n\n\nThis is enough for me to be able to import the package\nas long as I’m in the right directory\n\nThe same is true for any module:\n(by which we mean a file that ends in .py)\nI can import it if I’m in the right directory\n\n\n\nThis is just because of how Python’s import system works:\n“First check in the current working directory if there’s a .py file or a directory with an __init__.py that has the name we’re importing”\n\n\nHow do I make it so I can\n\npip install simple\nthen import simple without being in the right directory?\n\n\nNote that this the code I have locally, we aren’t talking about distribution packages yet!\n\n\nHow do I make it so I can pip install simple and then import simple without being in the right directory?\nWe need one more file:\na pyproject.toml file\n\n\n\nThis is the bare minimum pyproject.toml file for our simple module\n\n\n\n\n\n\n“Tom’s Obvious Minimal Language”: https://toml.io/en/\n\n“A [configuration] file format for humans”\n\nUsed in other ecosystems\nNice because parsers map to native type\n\n\n\n\n\n\n\n\n\n\n\nthe spec: https://toml.io/en/v1.0.0\n\n\n\nNow just\n\nnavigate to the directory where your module lives\nactivate your virtual environment\ntype pip install .\nnow you can import it!\n\n\n\n\n\nScenario: Samspon is a computational dog scientist.\nSampson has a set of functions they are using across all their projects, so they wrap them up in a package, dogpy\n\n\n\n\n\n\nwww.rexspecs.com/blogs/news/sampson-the-lab-dog-tests-the-boundaries-of-science\n\n\nSampson’s project dogpy has the following:\n\nA src directory (for “source code”)\nThe package itself inside src, a directory named dogpy\nA pyproject.toml file\n\n\nWhat’s different here?\n\n\n\n\n\n\n\n\n\nSo you don’t accidentally import the local package when you want to run tests on the distribution package\nAesthetics: it looks better to have “src”, “docs”, “tests”\n\n\n\n\n\nWe have the dogpy dir\nIt contains one module (by which I mean a .py file): bark.py\nIt also contains another directory! The elusive sub-package. Namely, fetch.\nThe fetch sub-package contains two other modules: ball.py and bone.py\n\n\n\n\n\nIt initializes your module\nYou import modules, functions, etc., here\nso that your users can get what they need from your package’s namespace\n\n\n\n\n\n\nShort version: “flat is better than nested”\n\nYour users want to write package.function, not package.subpackage.subsubpackage.subsubsubpackage.function\nBut having one level of sub-packages can help with readability\nMost scientific Python packages have a set of sub-packages, each containing functions:\n\nnumpy.random.default_rng\nsklearn.model_selection.test_train_split\n\nYour package’s code ≠ your package’s namespace! You control the namespace with imports!\n\nLong version:\n\nhttps://benhoyt.com/writings/python-api-design/\nhttp://blog.nicholdav.info/four-tips-structuring-research-python/\n\n\n\n\n\n\n\n\nNow we need a distribution package.\nWe also need to define some more terms so that the rest of this make sense.\n\n\n\n\nIt used to be the case that all distributions were built with a setup.py file\nThere was only one tool that did this: setuptools\nNow: pure Python projects don’t need a setup.py file It’s better\n\n\nThe long version:\nhttps://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html\n\n\n\n\nTo move away from setup.py and setuptools, PEP 517 introduced the idea of “front-ends” and “back-ends”\nhttps://peps.python.org/pep-0517/\nMostly you shouldn’t have to think about this.\nBut in your pyproject.toml file you will specify a “build backend”.\nThat’s the tool that knows how to take your “source tree” and make a distribution package.\n\n\n\n“Build backends” (always) make two types of distribution packages:\na source distribution (“sdist”), and wheels\nhttps://packaging.python.org/en/latest/discussions/package-formats/\n\n\n“Sdist”\n\nLiterally your project in a compressed archive (.tar.gz)\npip uses this as a fallback if it can’t find a wheel\nDownstream package managers use the sdist to provide their own distributions, e.g. conda, homebrew\n\nWheel\n\nCan be platform specific (e.g., Windows 64 bit)\nMatters most for packages with compiled extensions\n\n\n\n\n\nTo-do list:\n\nAdd metadata to our pyproject.toml file\n\nBuild backend\nThe metadata that will show up on PyPI\n\nBuild your distribution package\nPublish the distribution package to PyPI\n\n\n\n\n“I have to write this pyproject.toml file by hand, make and virtual environments, and I don’t even know how much work it will take to build a distribution package yet…”\nGood news!\nThere are packaging tools that will do a lot of this work for you!\n\n\n\nThe not so good news: there are many different tools\nhttps://pradyunsg.me/blog/2023/01/21/thoughts-on-python-packaging/\nHere’s two options:\n\nLightweight: flit– https://flit.pypa.io/en/stable/\nSwiss army knife: hatch – https://hatch.pypa.io/\n\n\n\n\nTo build our distribution package, we need a build system.\nWe declare this in a build-system table.\n\n\n\n\n\n\nGood explainer in flit docs:\nhttps://flit.pypa.io/en/latest/ pyproject_toml.html#new-style-metadata\n\n\n\n\n\n\n\n\nYou should know about SPEC0, that specifies what versions of Python the core scientific packages work with: https://scientific-python.org/specs/spec-0000/\nUsually you don’t want to put upper bounds (&gt;3.6, &lt;4.0) on Python or your dependencies: https://iscinumpy.dev/post/bound-version-constraints/\n\n\n\n\nMost packaging tools have some sort of build command\n\n\n\n\nMost packaging tools have some sort of publish command\n\n\n\n\n\n\n\nInfrastructure:\nAll the other stuff besides code that makes it easier for\n\nyou to develop and maintain your package\nothers to use your package, give you feedback, and contribute\n\n\n\nREADME\nLICENSE\nCode of conduct\nCHANGELOG\ndocs\ntests\nissue tracker\ncontinuous integration\n\n\n\n\n\n\n\nOften the first thing people see\nGitHub shows this by default -www.makeareadme.com/\n\n\n\n\n\n\nThings you want in your README:\n\nPackage name\nBrief description that makes sense to a broad audience\nVisuals! 1 picture = 1k words\nInstallation instructions\nUsage\nHow to contribute\nCitation information\n\n\n\n\nYou are giving other people permission to use your code\n\nhttps://choosealicense.com/\nMIT and BSD are common for open source scientific software\nMore on this later!\n\n\n\n\n\nEstablishes expectations for behavior\nHelps create inclusive community\nhttps://opensource.guide/code-of-conduct/\nHighly suggest looking at other scientific Python projects: https://docs.scipy.org/doc/scipy/dev/conduct/ code_of_conduct.html#endnotes\n\n\n\n\nHuman-readable record of changes to your project\nhttps://keepachangelog.com/en/1.1.0/\n\n\n\n\n\n\n\n\n\n\n\nTo be discussed in later modules"
  },
  {
    "objectID": "package_structure.html#acknowledgements",
    "href": "package_structure.html#acknowledgements",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "The previous versions of this module!\nPython packaging 101 tutorial from pyOpenSci: https://www.pyopensci.org/python-package-guide/tutorials/intro.html#python-packaging-101\nPython Packages: https://py-pkgs.org/\nScientific Python packaging guide: https://learn.scientific-python.org/development/tutorials/packaging/\nPython Packaging User Guide: https://packaging.python.org/en/latest/"
  },
  {
    "objectID": "package_structure.html#what-is-a-python-package",
    "href": "package_structure.html#what-is-a-python-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "First, let’s define module\nhttps://docs.python.org/3/glossary.html#term-module\n\nModule: An object that serves an organizational unit of python code. Modules have a namespace containing arbitrary python objects. Modules are loaded into Python by the process of importing"
  },
  {
    "objectID": "package_structure.html#section",
    "href": "package_structure.html#section",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Deconstructing that definition:\n\nWhen I write import modulename I am loading a module\n\nBut we also talk about “importing a package”!\nThis seems to imply a package is a kind of module\n\n\n\n\nThe module can contain “arbitrary Python objects”\n\nThat could include other modules!\nIt’s almost like we need a special name for a “module that can contain other modules”!\n\n\n\n\nWhen I load the module, its name gets added to the namespace\n\nnamespace: a collection of currently defined names and the objects they reference\nSo now I can use the module name to access things inside of it with dot notation, like another module that contains a function: numpy.random.default_rng"
  },
  {
    "objectID": "package_structure.html#where-do-modules-come-from",
    "href": "package_structure.html#where-do-modules-come-from",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "The standard library\n\nPython code\nCompiled C code\n\nA local file that ends in .py\n\n(confusingly, also called a “module”)\n\nThird-party libraries that you pip install or conda install\n\ni.e., packages\n\nA local package (we’re getting to this)"
  },
  {
    "objectID": "package_structure.html#what-is-a-python-package-1",
    "href": "package_structure.html#what-is-a-python-package-1",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Ok, now that we spent all that time defining module, we can finally define package\n“A Python module which can contain submodules or recursively, subpackages.”\nhttps://docs.python.org/3/glossary.html#term-package"
  },
  {
    "objectID": "package_structure.html#package-can-have-multiple-meanings",
    "href": "package_structure.html#package-can-have-multiple-meanings",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Two main usages:\nhttps://packaging.python.org/en/latest/discussions/distribution-package-vs-import-package/"
  },
  {
    "objectID": "package_structure.html#two-types-of-packages-import-package",
    "href": "package_structure.html#two-types-of-packages-import-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "This is the one we already talked about\nThe thing you get when you write import packagename in your code\nWe’re going to show you how to make one of these first"
  },
  {
    "objectID": "package_structure.html#two-types-of-packages-distribution-package",
    "href": "package_structure.html#two-types-of-packages-distribution-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "The actual artifact that gets downloaded off the internet and stored on your computer somewhere\nlike when you run pip install package\nWe need to learn how to make one of these too!"
  },
  {
    "objectID": "package_structure.html#when-should-i-turn-my-code-into-a-package",
    "href": "package_structure.html#when-should-i-turn-my-code-into-a-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Two common cases for research code:\n\nCode that goes with a research article\n\nmainly used to reproduce the results\nAKA a (computational) project or a research compendium\n\nA generalized tool or library that other researchers can use"
  },
  {
    "objectID": "package_structure.html#packaging-code-for-a-paper",
    "href": "package_structure.html#packaging-code-for-a-paper",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "You have multiple scripts that use the same function\nSo you want to be able to import that function\nIt’s sufficient for you to make an “import package” you use in scripts (e.g., in a Jupyter notebook)\n\n\n\nThis kind of package does not necessarily need all the infrastructure you will learn about in this workshop\n\nsuch as: its own rendered website with documentation\n\nIf someone uses the code for your paper, they will get a copy of the code and set it up so they can import the same way; they don’t expect to pip install paper\n\n\nFor more on projects and research compendia in general, see\n\n“Good enough practices in scientific computing”\n“How repro-packs can save your future self”\nTuring Way guide: https://book.the-turing-way.org/reproducible-research/compendia\nKarthik’s talk: https://github.com/karthik/rstudio2019"
  },
  {
    "objectID": "package_structure.html#to-share-a-generalized-tool",
    "href": "package_structure.html#to-share-a-generalized-tool",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "This is what we’re here (mostly) to learn about!\nThis is when we want to make a “distribution package” too!\n\nYou want people to be able to pip install awesometool"
  },
  {
    "objectID": "package_structure.html#the-structure-of-a-python-package",
    "href": "package_structure.html#the-structure-of-a-python-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "The simplest possible Python package\n\nA directory with a single file in it named __init__.py\n\nThe file can be empty\n\nThe __init__.py file tells Python that “this directory is a package"
  },
  {
    "objectID": "package_structure.html#how-can-i-import-my-own-code",
    "href": "package_structure.html#how-can-i-import-my-own-code",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "This is enough for me to be able to import the package\nas long as I’m in the right directory\n\nThe same is true for any module:\n(by which we mean a file that ends in .py)\nI can import it if I’m in the right directory\n\n\n\nThis is just because of how Python’s import system works:\n“First check in the current working directory if there’s a .py file or a directory with an __init__.py that has the name we’re importing”\n\n\nHow do I make it so I can\n\npip install simple\nthen import simple without being in the right directory?\n\n\nNote that this the code I have locally, we aren’t talking about distribution packages yet!\n\n\nHow do I make it so I can pip install simple and then import simple without being in the right directory?\nWe need one more file:\na pyproject.toml file"
  },
  {
    "objectID": "package_structure.html#how-do-i-make-it-so-i-can-import-a-module",
    "href": "package_structure.html#how-do-i-make-it-so-i-can-import-a-module",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "This is the bare minimum pyproject.toml file for our simple module"
  },
  {
    "objectID": "package_structure.html#what-is-a-toml-file",
    "href": "package_structure.html#what-is-a-toml-file",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "“Tom’s Obvious Minimal Language”: https://toml.io/en/\n\n“A [configuration] file format for humans”\n\nUsed in other ecosystems\nNice because parsers map to native type"
  },
  {
    "objectID": "package_structure.html#anatomy-of-a-toml-file",
    "href": "package_structure.html#anatomy-of-a-toml-file",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "the spec: https://toml.io/en/v1.0.0"
  },
  {
    "objectID": "package_structure.html#ok-i-have-a-pyproject.toml-file-now-what",
    "href": "package_structure.html#ok-i-have-a-pyproject.toml-file-now-what",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Now just\n\nnavigate to the directory where your module lives\nactivate your virtual environment\ntype pip install .\nnow you can import it!"
  },
  {
    "objectID": "package_structure.html#a-slightly-more-complicated-python-package",
    "href": "package_structure.html#a-slightly-more-complicated-python-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Scenario: Samspon is a computational dog scientist.\nSampson has a set of functions they are using across all their projects, so they wrap them up in a package, dogpy\n\n\n\n\n\n\nwww.rexspecs.com/blogs/news/sampson-the-lab-dog-tests-the-boundaries-of-science\n\n\nSampson’s project dogpy has the following:\n\nA src directory (for “source code”)\nThe package itself inside src, a directory named dogpy\nA pyproject.toml file\n\n\nWhat’s different here?"
  },
  {
    "objectID": "package_structure.html#why-src",
    "href": "package_structure.html#why-src",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "So you don’t accidentally import the local package when you want to run tests on the distribution package\nAesthetics: it looks better to have “src”, “docs”, “tests”"
  },
  {
    "objectID": "package_structure.html#the-package-itself",
    "href": "package_structure.html#the-package-itself",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "We have the dogpy dir\nIt contains one module (by which I mean a .py file): bark.py\nIt also contains another directory! The elusive sub-package. Namely, fetch.\nThe fetch sub-package contains two other modules: ball.py and bone.py"
  },
  {
    "objectID": "package_structure.html#why-__init__.py-anyways",
    "href": "package_structure.html#why-__init__.py-anyways",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "It initializes your module\nYou import modules, functions, etc., here\nso that your users can get what they need from your package’s namespace"
  },
  {
    "objectID": "package_structure.html#how-should-i-structure-my-python-package",
    "href": "package_structure.html#how-should-i-structure-my-python-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Short version: “flat is better than nested”\n\nYour users want to write package.function, not package.subpackage.subsubpackage.subsubsubpackage.function\nBut having one level of sub-packages can help with readability\nMost scientific Python packages have a set of sub-packages, each containing functions:\n\nnumpy.random.default_rng\nsklearn.model_selection.test_train_split\n\nYour package’s code ≠ your package’s namespace! You control the namespace with imports!\n\nLong version:\n\nhttps://benhoyt.com/writings/python-api-design/\nhttp://blog.nicholdav.info/four-tips-structuring-research-python/"
  },
  {
    "objectID": "package_structure.html#how-do-i-publish-my-package",
    "href": "package_structure.html#how-do-i-publish-my-package",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Now we need a distribution package.\nWe also need to define some more terms so that the rest of this make sense."
  },
  {
    "objectID": "package_structure.html#what-about-setup.py",
    "href": "package_structure.html#what-about-setup.py",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "It used to be the case that all distributions were built with a setup.py file\nThere was only one tool that did this: setuptools\nNow: pure Python projects don’t need a setup.py file It’s better\n\n\nThe long version:\nhttps://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html"
  },
  {
    "objectID": "package_structure.html#distribution-packages-frontends-and-backends",
    "href": "package_structure.html#distribution-packages-frontends-and-backends",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "To move away from setup.py and setuptools, PEP 517 introduced the idea of “front-ends” and “back-ends”\nhttps://peps.python.org/pep-0517/\nMostly you shouldn’t have to think about this.\nBut in your pyproject.toml file you will specify a “build backend”.\nThat’s the tool that knows how to take your “source tree” and make a distribution package."
  },
  {
    "objectID": "package_structure.html#distribution-packages-formats",
    "href": "package_structure.html#distribution-packages-formats",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "“Build backends” (always) make two types of distribution packages:\na source distribution (“sdist”), and wheels\nhttps://packaging.python.org/en/latest/discussions/package-formats/\n\n\n“Sdist”\n\nLiterally your project in a compressed archive (.tar.gz)\npip uses this as a fallback if it can’t find a wheel\nDownstream package managers use the sdist to provide their own distributions, e.g. conda, homebrew\n\nWheel\n\nCan be platform specific (e.g., Windows 64 bit)\nMatters most for packages with compiled extensions"
  },
  {
    "objectID": "package_structure.html#how-do-i-publish-my-package-1",
    "href": "package_structure.html#how-do-i-publish-my-package-1",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "To-do list:\n\nAdd metadata to our pyproject.toml file\n\nBuild backend\nThe metadata that will show up on PyPI\n\nBuild your distribution package\nPublish the distribution package to PyPI"
  },
  {
    "objectID": "package_structure.html#python-packaging-feels-like-a-lot-of-work",
    "href": "package_structure.html#python-packaging-feels-like-a-lot-of-work",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "“I have to write this pyproject.toml file by hand, make and virtual environments, and I don’t even know how much work it will take to build a distribution package yet…”\nGood news!\nThere are packaging tools that will do a lot of this work for you!"
  },
  {
    "objectID": "package_structure.html#python-packaging-feels-like-a-lot-of-work-1",
    "href": "package_structure.html#python-packaging-feels-like-a-lot-of-work-1",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "The not so good news: there are many different tools\nhttps://pradyunsg.me/blog/2023/01/21/thoughts-on-python-packaging/\nHere’s two options:\n\nLightweight: flit– https://flit.pypa.io/en/stable/\nSwiss army knife: hatch – https://hatch.pypa.io/"
  },
  {
    "objectID": "package_structure.html#pyproject.toml-metadata-build-system",
    "href": "package_structure.html#pyproject.toml-metadata-build-system",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "To build our distribution package, we need a build system.\nWe declare this in a build-system table."
  },
  {
    "objectID": "package_structure.html#pyproject.toml-project-metadata",
    "href": "package_structure.html#pyproject.toml-project-metadata",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Good explainer in flit docs:\nhttps://flit.pypa.io/en/latest/ pyproject_toml.html#new-style-metadata"
  },
  {
    "objectID": "package_structure.html#aside-python-requires-and-dependencies",
    "href": "package_structure.html#aside-python-requires-and-dependencies",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "You should know about SPEC0, that specifies what versions of Python the core scientific packages work with: https://scientific-python.org/specs/spec-0000/\nUsually you don’t want to put upper bounds (&gt;3.6, &lt;4.0) on Python or your dependencies: https://iscinumpy.dev/post/bound-version-constraints/"
  },
  {
    "objectID": "package_structure.html#building-distribution-packages",
    "href": "package_structure.html#building-distribution-packages",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Most packaging tools have some sort of build command"
  },
  {
    "objectID": "package_structure.html#publishing-to-pypi",
    "href": "package_structure.html#publishing-to-pypi",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Most packaging tools have some sort of publish command"
  },
  {
    "objectID": "package_structure.html#what-else-do-i-need-besides-code",
    "href": "package_structure.html#what-else-do-i-need-besides-code",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Infrastructure:\nAll the other stuff besides code that makes it easier for\n\nyou to develop and maintain your package\nothers to use your package, give you feedback, and contribute\n\n\n\nREADME\nLICENSE\nCode of conduct\nCHANGELOG\ndocs\ntests\nissue tracker\ncontinuous integration"
  },
  {
    "objectID": "package_structure.html#readme",
    "href": "package_structure.html#readme",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Often the first thing people see\nGitHub shows this by default -www.makeareadme.com/\n\n\n\n\n\n\nThings you want in your README:\n\nPackage name\nBrief description that makes sense to a broad audience\nVisuals! 1 picture = 1k words\nInstallation instructions\nUsage\nHow to contribute\nCitation information"
  },
  {
    "objectID": "package_structure.html#license",
    "href": "package_structure.html#license",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "You are giving other people permission to use your code\n\nhttps://choosealicense.com/\nMIT and BSD are common for open source scientific software\nMore on this later!"
  },
  {
    "objectID": "package_structure.html#code-of-conduct",
    "href": "package_structure.html#code-of-conduct",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Establishes expectations for behavior\nHelps create inclusive community\nhttps://opensource.guide/code-of-conduct/\nHighly suggest looking at other scientific Python projects: https://docs.scipy.org/doc/scipy/dev/conduct/ code_of_conduct.html#endnotes"
  },
  {
    "objectID": "package_structure.html#changelog",
    "href": "package_structure.html#changelog",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "Human-readable record of changes to your project\nhttps://keepachangelog.com/en/1.1.0/"
  },
  {
    "objectID": "package_structure.html#docs-tests-etc.",
    "href": "package_structure.html#docs-tests-etc.",
    "title": "(re)introducing Python packaging",
    "section": "",
    "text": "To be discussed in later modules"
  },
  {
    "objectID": "software-revealjs.html#agenda",
    "href": "software-revealjs.html#agenda",
    "title": "Software Design and Modularity",
    "section": "Agenda",
    "text": "Agenda\n\nMotivation\nCore Ideas\nBasic Application\nCommon Patterns\nTakeaways"
  },
  {
    "objectID": "software-revealjs.html#motivation",
    "href": "software-revealjs.html#motivation",
    "title": "Software Design and Modularity",
    "section": "Motivation",
    "text": "Motivation"
  },
  {
    "objectID": "software-revealjs.html#section",
    "href": "software-revealjs.html#section",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Computers do exactly what you program them to do.\n\n\nIf you aren’t getting the results you expect, look for a simpler model."
  },
  {
    "objectID": "software-revealjs.html#three-targets-for-simpler-programs",
    "href": "software-revealjs.html#three-targets-for-simpler-programs",
    "title": "Software Design and Modularity",
    "section": "Three Targets For Simpler Programs",
    "text": "Three Targets For Simpler Programs\n\nMake software easier to understand by breaking it into pieces that can be understood separately\n\n\nMake it easier to collaborate with others by making your code understandable OR make it easier for yourself when you ultimately need to revisit your code after six months, a year, or more working on a different project."
  },
  {
    "objectID": "software-revealjs.html#section-1",
    "href": "software-revealjs.html#section-1",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Enable the ability to maintain, reuse and extend software (or bits of software)\n\n\nBy breaking software into pieces that can be understood and operate independently, we hope they are not only easier to maintain, but portable from project to project. If your research continues to build off prior work, why doesn’t your code?"
  },
  {
    "objectID": "software-revealjs.html#section-2",
    "href": "software-revealjs.html#section-2",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Avoid extra work from lack of forethought towards methods of engagement with software\n\n\nLess work good 👍👍"
  },
  {
    "objectID": "software-revealjs.html#core-ideas",
    "href": "software-revealjs.html#core-ideas",
    "title": "Software Design and Modularity",
    "section": "Core Ideas",
    "text": "Core Ideas"
  },
  {
    "objectID": "software-revealjs.html#core-ideas-1",
    "href": "software-revealjs.html#core-ideas-1",
    "title": "Software Design and Modularity",
    "section": "Core Ideas",
    "text": "Core Ideas\n\nDecomposable – can be broken down into modules to reduce complexity and allow teamwork\nComposable – enable code to be reused in many places\nUnderstandable – one module can be examined, reasoned about, developed, etc. in isolation\nContinuity – a small change in the requirements should affect a small number of modules\nIsolation – an error in one module should be as contained as possible"
  },
  {
    "objectID": "software-revealjs.html#section-3",
    "href": "software-revealjs.html#section-3",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Cohesion – internal consistency Generally, we want to break down our code into smaller pieces but we should have consistency in design and pattern across all of those pieces.\n\n\nFor example, how you handle errors, how you name variables, how you process data, etc. Changing your coding style from function to function can make it harder to understand and maintain your code."
  },
  {
    "objectID": "software-revealjs.html#section-4",
    "href": "software-revealjs.html#section-4",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Well designed software should try to minimize the mental effort required to reason about it.\n\n\nIf there are too complex of functions, break them out to think about and develop one at a time."
  },
  {
    "objectID": "software-revealjs.html#basic-applications",
    "href": "software-revealjs.html#basic-applications",
    "title": "Software Design and Modularity",
    "section": "Basic Applications",
    "text": "Basic Applications"
  },
  {
    "objectID": "software-revealjs.html#section-5",
    "href": "software-revealjs.html#section-5",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "You want to write a program to gather data from a number of sources (databases, web sites, etc.), all of this data has similar structure but may have slightly different formats."
  },
  {
    "objectID": "software-revealjs.html#section-6",
    "href": "software-revealjs.html#section-6",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Following our “separate code into small pieces” idea, our first thought might be to write a single function that can gather data from any our sources – at the very least, you have separated out the data gathering from the data processing."
  },
  {
    "objectID": "software-revealjs.html#section-7",
    "href": "software-revealjs.html#section-7",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "A single function separated out is already an improvement! But, if you have many sources of data, you may want to define and structure your code in a way that makes it easy to add new sources of data. In Python, one way to do this is via “AbstractBaseClasses” (ABCs)."
  },
  {
    "objectID": "software-revealjs.html#section-8",
    "href": "software-revealjs.html#section-8",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Lets start with a toy example where you want to pull price data for a number of items from a number of sellers.\n\nfrom abc import ABC, abstractmethod\n\nimport pandas as pd\n\n\nclass DataSource(ABC):\n    @abstractmethod\n    def pull_data(self) -&gt; pd.DataFrame:\n        pass\n\n    @staticmethod\n    def validate_data(data: pd.DataFrame) -&gt; None:\n        # Check that all the columns we need are present\n        if any(\n            feature not in data.columns\n            for feature in [\"name\", \"description\", \"price\", \"category\"]\n        ):\n            raise ValueError(\"The dataset does not contain all the necessary columns\")\n\n        # Check that the price is non-negative\n        if (data[\"price\"] &lt; 0).any():\n            raise ValueError(\"The price cannot be negative\")\n\n        # etc. etc.\nclass AmazonDataSource(DataSource):\n    def pull_data(self) -&gt; pd.DataFrame:\n        # You likely going to pull data from their API or service\n        # keep that contained here\n        # ...\n        # before you return the data, validate it\n        DataSource.validate_data(data)\n        return data\n\n\nclass TargetDataSource(DataSource):\n    def pull_data(self) -&gt; pd.DataFrame:\n        # You likely going to pull data from their API or service\n        # keep that contained here\n        # ...\n        # before you return the data, validate it\n        DataSource.validate_data(data)\n        return data"
  },
  {
    "objectID": "software-revealjs.html#section-9",
    "href": "software-revealjs.html#section-9",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Abstract Base Classes ABCs are great! They allow you to define a common interface for a group of classes. As well as enforce that the classes that inherit from the ABC implement the methods you define.\n\n\nAs with validate_data you can also attach utility functions that each sub-class may want to use to keep everything together.\n\n\nBut, there are lots of other ways to structure code and other design patterns."
  },
  {
    "objectID": "software-revealjs.html#common-patterns",
    "href": "software-revealjs.html#common-patterns",
    "title": "Software Design and Modularity",
    "section": "Common Patterns",
    "text": "Common Patterns"
  },
  {
    "objectID": "software-revealjs.html#section-10",
    "href": "software-revealjs.html#section-10",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "For the next ten minutes, with a partner, look through:\nhttps://github.com/faif/python-patterns\nThink about how any of these patterns might be useful to a problem you recently encountered.\nA first one to look at might be the factory which is very useful when trying to have a standard interface to create different objects or functions using a parameter.\nEx: you are processing a bunch of different image file formats and you need to find the appropriate file reader for each\nAs you are doing this, make note of patterns you find interesting or particularly useful and why. Or take note of patterns you have never seen before"
  },
  {
    "objectID": "software-revealjs.html#takeaways",
    "href": "software-revealjs.html#takeaways",
    "title": "Software Design and Modularity",
    "section": "Takeaways",
    "text": "Takeaways"
  },
  {
    "objectID": "software-revealjs.html#section-11",
    "href": "software-revealjs.html#section-11",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Three Targets For Simpler Programs\n\nMake software easier to understand by breaking it into pieces that can be understood separately\nEnable the ability to maintain, reuse and extend software (or bits of software)\nAvoid extra work from lack of forethought towards methods of engagement with software"
  },
  {
    "objectID": "software-revealjs.html#section-12",
    "href": "software-revealjs.html#section-12",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Well designed software should try to minimize the mental effort required to reason about it.\nIf there are too complex of functions, break them out to think about and develop one at a time. If there is too much coupling between functions or modules, try to reduce coupling."
  },
  {
    "objectID": "software-revealjs.html#section-13",
    "href": "software-revealjs.html#section-13",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Learn and apply coding patterns. There are many resources to look up common patterns.\nA good way to learn them is to use the example code commonly given and change, add, or remove values and see what happens."
  },
  {
    "objectID": "software-revealjs.html#section-14",
    "href": "software-revealjs.html#section-14",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Credit\nMuch of the content of this talk comes from:\n\nUW CSE 331 Lecture 1\nPrevious URSSI Winter School\nSoftware Design for Research Software"
  },
  {
    "objectID": "software_design.html",
    "href": "software_design.html",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Motivation\nCore Ideas\nBasic Application\nCommon Patterns\nTakeaways",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#agenda",
    "href": "software_design.html#agenda",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Motivation\nCore Ideas\nBasic Application\nCommon Patterns\nTakeaways",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#motivation",
    "href": "software_design.html#motivation",
    "title": "Software Design and Modularity",
    "section": "Motivation",
    "text": "Motivation",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section",
    "href": "software_design.html#section",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Computers do exactly what you program them to do.\n\n\nIf you aren’t getting the results you expect, look for a simpler model.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#three-targets-for-simpler-programs",
    "href": "software_design.html#three-targets-for-simpler-programs",
    "title": "Software Design and Modularity",
    "section": "Three Targets For Simpler Programs",
    "text": "Three Targets For Simpler Programs\n\nMake software easier to understand by breaking it into pieces that can be understood separately\n\n\nMake it easier to collaborate with others by making your code understandable OR make it easier for yourself when you ultimately need to revisit your code after six months, a year, or more working on a different project.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-1",
    "href": "software_design.html#section-1",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Enable the ability to maintain, reuse and extend software (or bits of software)\n\n\nBy breaking software into pieces that can be understood and operate independently, we hope they are not only easier to maintain, but portable from project to project. If your research continues to build off prior work, why doesn’t your code?",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-2",
    "href": "software_design.html#section-2",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Avoid extra work from lack of forethought towards methods of engagement with software\n\n\nLess work good 👍👍",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#core-ideas",
    "href": "software_design.html#core-ideas",
    "title": "Software Design and Modularity",
    "section": "Core Ideas",
    "text": "Core Ideas",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#core-ideas-1",
    "href": "software_design.html#core-ideas-1",
    "title": "Software Design and Modularity",
    "section": "Core Ideas",
    "text": "Core Ideas\n\nDecomposable – can be broken down into modules to reduce complexity and allow teamwork\nComposable – enable code to be reused in many places\nUnderstandable – one module can be examined, reasoned about, developed, etc. in isolation\nContinuity – a small change in the requirements should affect a small number of modules\nIsolation – an error in one module should be as contained as possible",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-3",
    "href": "software_design.html#section-3",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Cohesion – internal consistency Generally, we want to break down our code into smaller pieces but we should have consistency in design and pattern across all of those pieces.\n\n\nFor example, how you handle errors, how you name variables, how you process data, etc. Changing your coding style from function to function can make it harder to understand and maintain your code.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-4",
    "href": "software_design.html#section-4",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Well designed software should try to minimize the mental effort required to reason about it.\n\n\nIf there are too complex of functions, break them out to think about and develop one at a time.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#basic-applications",
    "href": "software_design.html#basic-applications",
    "title": "Software Design and Modularity",
    "section": "Basic Applications",
    "text": "Basic Applications",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-5",
    "href": "software_design.html#section-5",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "You want to write a program to gather data from a number of sources (databases, web sites, etc.), all of this data has similar structure but may have slightly different formats.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-6",
    "href": "software_design.html#section-6",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Following our “separate code into small pieces” idea, our first thought might be to write a single function that can gather data from any our sources – at the very least, you have separated out the data gathering from the data processing.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-7",
    "href": "software_design.html#section-7",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "A single function separated out is already an improvement! But, if you have many sources of data, you may want to define and structure your code in a way that makes it easy to add new sources of data. In Python, one way to do this is via “AbstractBaseClasses” (ABCs).",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-8",
    "href": "software_design.html#section-8",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Lets start with a toy example where you want to pull price data for a number of items from a number of sellers.\n\nfrom abc import ABC, abstractmethod\n\nimport pandas as pd\n\n\nclass DataSource(ABC):\n    @abstractmethod\n    def pull_data(self) -&gt; pd.DataFrame:\n        pass\n\n    @staticmethod\n    def validate_data(data: pd.DataFrame) -&gt; None:\n        # Check that all the columns we need are present\n        if any(\n            feature not in data.columns\n            for feature in [\"name\", \"description\", \"price\", \"category\"]\n        ):\n            raise ValueError(\"The dataset does not contain all the necessary columns\")\n\n        # Check that the price is non-negative\n        if (data[\"price\"] &lt; 0).any():\n            raise ValueError(\"The price cannot be negative\")\n\n        # etc. etc.\nclass AmazonDataSource(DataSource):\n    def pull_data(self) -&gt; pd.DataFrame:\n        # You likely going to pull data from their API or service\n        # keep that contained here\n        # ...\n        # before you return the data, validate it\n        DataSource.validate_data(data)\n        return data\n\n\nclass TargetDataSource(DataSource):\n    def pull_data(self) -&gt; pd.DataFrame:\n        # You likely going to pull data from their API or service\n        # keep that contained here\n        # ...\n        # before you return the data, validate it\n        DataSource.validate_data(data)\n        return data",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-9",
    "href": "software_design.html#section-9",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Abstract Base Classes ABCs are great! They allow you to define a common interface for a group of classes. As well as enforce that the classes that inherit from the ABC implement the methods you define.\n\n\nAs with validate_data you can also attach utility functions that each sub-class may want to use to keep everything together.\n\n\nBut, there are lots of other ways to structure code and other design patterns.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#common-patterns",
    "href": "software_design.html#common-patterns",
    "title": "Software Design and Modularity",
    "section": "Common Patterns",
    "text": "Common Patterns",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-10",
    "href": "software_design.html#section-10",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "For the next ten minutes, with a partner, look through:\nhttps://github.com/faif/python-patterns\nThink about how any of these patterns might be useful to a problem you recently encountered.\nA first one to look at might be the factory which is very useful when trying to have a standard interface to create different objects or functions using a parameter.\nEx: you are processing a bunch of different image file formats and you need to find the appropriate file reader for each\nAs you are doing this, make note of patterns you find interesting or particularly useful and why. Or take note of patterns you have never seen before",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#takeaways",
    "href": "software_design.html#takeaways",
    "title": "Software Design and Modularity",
    "section": "Takeaways",
    "text": "Takeaways",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-11",
    "href": "software_design.html#section-11",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Three Targets For Simpler Programs\n\nMake software easier to understand by breaking it into pieces that can be understood separately\nEnable the ability to maintain, reuse and extend software (or bits of software)\nAvoid extra work from lack of forethought towards methods of engagement with software",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-12",
    "href": "software_design.html#section-12",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Well designed software should try to minimize the mental effort required to reason about it.\nIf there are too complex of functions, break them out to think about and develop one at a time. If there is too much coupling between functions or modules, try to reduce coupling.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-13",
    "href": "software_design.html#section-13",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Learn and apply coding patterns. There are many resources to look up common patterns.\nA good way to learn them is to use the example code commonly given and change, add, or remove values and see what happens.",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "software_design.html#section-14",
    "href": "software_design.html#section-14",
    "title": "Software Design and Modularity",
    "section": "",
    "text": "Credit\nMuch of the content of this talk comes from:\n\nUW CSE 331 Lecture 1\nPrevious URSSI Winter School\nSoftware Design for Research Software",
    "crumbs": [
      "Software Design and Modularity"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Software and Open Science",
    "section": "",
    "text": "Welcome to the URSSI Summer School on Research Software and Open Science",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "Professor Carole Goble in “Better Software, Better Research”:\n\nOne of my favorite #overlyhonestmethods tweets (a hashtag for lab scientists) is Ian Holmes’s “You can download our code from the URL supplied. Good luck downloading the only postdoc who can get it to run, though.”\n\n\n\n\n\nThe value and extent of your work is clearer if it can be understood by colleagues.\nDocumentation provides provenance for your scientific process, for your colleagues and yourself.\nDocumentation demonstrates your skill and professionalism.\n\n\n\n\n\nDocumentation pays for itself with the time it saves in the long run.\nDocumentation requires little effort beyond writing the software itself.\n\n\n\n\n\nTheory manuals\nUser and developer guides\nCode comments\nSelf-documenting code\nGenerated API documentation\n\n\n\n\n\nREADME: sits in top-level directory and contains all the necessary information for installing, getting started with, and understanding the accompanying code.\n\n\nMay be accompanied by other specific files: LICENSE, INSTALL, CITATION, ABOUT, CHANGELOG, CONTRIBUTING\n\n\n\n\nSQUIRREL, version 1.2 released on 2026-09-20\n\n# About\n\nThe Spectral Q and U Imaging Radiation Replicating Experimental Library\n(SQUIRREL) is a library for replicating radiation sources with spectral details\nand Q and U polarizations of superman bubblegum.\n\n# Installation\n\nThe SQUIRREL library relies on other libraries:\n\n- The ACORN library www.acorn.nutz\n- The TREEBRANCH database format API\n\nInstall those before installing the SQUIRREL library. To install the SQUIRREL\nlibrary:\n\n./configure\nmake --prefix=/install/path\nmake install\n...\n\n\n\nComments provide a way to insert metainformation about code intended for people, right next to the code:\ndef the_function(var):\n    \"\"\"This is a docstring, where a function definition might live\"\"\"\n    a = 1 + var # this is a simple comment\n    return a\n\n\n\nAlso possible to pollute code with unnecessary cruft:\ndef decay(index, database):\n    # first, retrieve the decay constants from the database\n    mylist = database.decay_constants()\n    # next, try to access an element of the list\n    try:\n        d = mylist[index] # gets decay constant at index in the list\n    # if the index doesn't exist\n    except IndexError:\n        # throw an informative error message\n        raise Exception(\"value not found in the list\")\n    return d\n\n\n\nCode written cleanly will have its own voice. Use intelligent naming to make most lines of code clear without comments, then use comments sparingly to help explain reasons or complicated sections:\ndef get_decay(index, database):\n    \"\"\"Returns decay constant at index in the database\"\"\"\n    lambdas = database.decay_constants()\n    try:\n        lambda_i = lambdas[index] # gets decay constant at index in the list\n    except IndexError:\n        raise Exception(\"value not found in the list\")\n    return lambda\n\n\n\n\nNaming: a class, variable, or function name should tell you why it exists, what it does, and how it is used.\n\n\nSimple functions: functions should be small to be understandable and testable; they should only do one thing.\n\n\nConsistent style: use a consistent, standardized style; e.g., select variable and function names according to the PEP8 style guide for Python.\n\n\n\n\n# packages and modules are short and lowercase\npackages\nmodules\n\n# other objects can be long\nClassesUseCamelCase\nExceptionsAreClassesToo\nfunctions_use_snake_case\nCONSTANTS_USE_ALL_CAPS\n\n# variable scope is *suggested* by style convention\n_single_leading_underscore_ # internal to module\nsingle_trailing_underscore_ # avoids conflicts with Python keywords\n__double_leading_trailing__ # these are magic, like __init__\n\n\n\n\ndocstring: comment placed immediately after a function or class definition, typically enclosed by three pairs of double quotes:\n\ndef &lt;name&gt;(&lt;args&gt;):\n    \"\"\"&lt;docstring&gt;\"\"\"\n    &lt;body&gt;\n\ndocstrings are available within Python via help() and iPython’s magic command ?, and Sphinx picks them up.\n\n\n\n\n\nMake docstrings descriptive and concise; you can explain the arguments of a function, its behavior, and how you intend it to be used.\n\ndef power(base, x):\n    \"\"\"Computes base^x. Both base and x should be integers,\n    floats, or another numeric type.\n    \"\"\"\n    return base**x",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#documentation",
    "href": "documentation.html#documentation",
    "title": "Documentation",
    "section": "",
    "text": "Professor Carole Goble in “Better Software, Better Research”:\n\nOne of my favorite #overlyhonestmethods tweets (a hashtag for lab scientists) is Ian Holmes’s “You can download our code from the URL supplied. Good luck downloading the only postdoc who can get it to run, though.”",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#value-of-documentation",
    "href": "documentation.html#value-of-documentation",
    "title": "Documentation",
    "section": "",
    "text": "The value and extent of your work is clearer if it can be understood by colleagues.\nDocumentation provides provenance for your scientific process, for your colleagues and yourself.\nDocumentation demonstrates your skill and professionalism.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#documentation-is-easier-than-you-think.",
    "href": "documentation.html#documentation-is-easier-than-you-think.",
    "title": "Documentation",
    "section": "",
    "text": "Documentation pays for itself with the time it saves in the long run.\nDocumentation requires little effort beyond writing the software itself.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#types-of-documentation",
    "href": "documentation.html#types-of-documentation",
    "title": "Documentation",
    "section": "",
    "text": "Theory manuals\nUser and developer guides\nCode comments\nSelf-documenting code\nGenerated API documentation",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#user-and-developer-guides",
    "href": "documentation.html#user-and-developer-guides",
    "title": "Documentation",
    "section": "",
    "text": "README: sits in top-level directory and contains all the necessary information for installing, getting started with, and understanding the accompanying code.\n\n\nMay be accompanied by other specific files: LICENSE, INSTALL, CITATION, ABOUT, CHANGELOG, CONTRIBUTING",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#readme-example",
    "href": "documentation.html#readme-example",
    "title": "Documentation",
    "section": "",
    "text": "SQUIRREL, version 1.2 released on 2026-09-20\n\n# About\n\nThe Spectral Q and U Imaging Radiation Replicating Experimental Library\n(SQUIRREL) is a library for replicating radiation sources with spectral details\nand Q and U polarizations of superman bubblegum.\n\n# Installation\n\nThe SQUIRREL library relies on other libraries:\n\n- The ACORN library www.acorn.nutz\n- The TREEBRANCH database format API\n\nInstall those before installing the SQUIRREL library. To install the SQUIRREL\nlibrary:\n\n./configure\nmake --prefix=/install/path\nmake install\n...",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#comments",
    "href": "documentation.html#comments",
    "title": "Documentation",
    "section": "",
    "text": "Comments provide a way to insert metainformation about code intended for people, right next to the code:\ndef the_function(var):\n    \"\"\"This is a docstring, where a function definition might live\"\"\"\n    a = 1 + var # this is a simple comment\n    return a",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#bad-comments",
    "href": "documentation.html#bad-comments",
    "title": "Documentation",
    "section": "",
    "text": "Also possible to pollute code with unnecessary cruft:\ndef decay(index, database):\n    # first, retrieve the decay constants from the database\n    mylist = database.decay_constants()\n    # next, try to access an element of the list\n    try:\n        d = mylist[index] # gets decay constant at index in the list\n    # if the index doesn't exist\n    except IndexError:\n        # throw an informative error message\n        raise Exception(\"value not found in the list\")\n    return d",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#useful-comments",
    "href": "documentation.html#useful-comments",
    "title": "Documentation",
    "section": "",
    "text": "Code written cleanly will have its own voice. Use intelligent naming to make most lines of code clear without comments, then use comments sparingly to help explain reasons or complicated sections:\ndef get_decay(index, database):\n    \"\"\"Returns decay constant at index in the database\"\"\"\n    lambdas = database.decay_constants()\n    try:\n        lambda_i = lambdas[index] # gets decay constant at index in the list\n    except IndexError:\n        raise Exception(\"value not found in the list\")\n    return lambda",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#self-documenting-code",
    "href": "documentation.html#self-documenting-code",
    "title": "Documentation",
    "section": "",
    "text": "Naming: a class, variable, or function name should tell you why it exists, what it does, and how it is used.\n\n\nSimple functions: functions should be small to be understandable and testable; they should only do one thing.\n\n\nConsistent style: use a consistent, standardized style; e.g., select variable and function names according to the PEP8 style guide for Python.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#guidelines-for-naming",
    "href": "documentation.html#guidelines-for-naming",
    "title": "Documentation",
    "section": "",
    "text": "# packages and modules are short and lowercase\npackages\nmodules\n\n# other objects can be long\nClassesUseCamelCase\nExceptionsAreClassesToo\nfunctions_use_snake_case\nCONSTANTS_USE_ALL_CAPS\n\n# variable scope is *suggested* by style convention\n_single_leading_underscore_ # internal to module\nsingle_trailing_underscore_ # avoids conflicts with Python keywords\n__double_leading_trailing__ # these are magic, like __init__",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#docstrings",
    "href": "documentation.html#docstrings",
    "title": "Documentation",
    "section": "",
    "text": "docstring: comment placed immediately after a function or class definition, typically enclosed by three pairs of double quotes:\n\ndef &lt;name&gt;(&lt;args&gt;):\n    \"\"\"&lt;docstring&gt;\"\"\"\n    &lt;body&gt;\n\ndocstrings are available within Python via help() and iPython’s magic command ?, and Sphinx picks them up.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#docstrings-more",
    "href": "documentation.html#docstrings-more",
    "title": "Documentation",
    "section": "",
    "text": "Make docstrings descriptive and concise; you can explain the arguments of a function, its behavior, and how you intend it to be used.\n\ndef power(base, x):\n    \"\"\"Computes base^x. Both base and x should be integers,\n    floats, or another numeric type.\n    \"\"\"\n    return base**x",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#numpy-style-docstrings",
    "href": "documentation.html#numpy-style-docstrings",
    "title": "Documentation",
    "section": "Numpy-style docstrings",
    "text": "Numpy-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The second parameter.\n\n    Returns\n    -------\n    bool\n        True if successful, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#google-style-docstrings",
    "href": "documentation.html#google-style-docstrings",
    "title": "Documentation",
    "section": "Google-style docstrings",
    "text": "Google-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#getting-started-with-sphinx",
    "href": "documentation.html#getting-started-with-sphinx",
    "title": "Documentation",
    "section": "Getting started with Sphinx",
    "text": "Getting started with Sphinx\n\npip install sphinx myst-parser\nmkdir docs\ncd docs\nsphinx-quickstart (accept defaults if unsure; answer “yes” for question about autodoc)\nsource directory holds .rst and .md files for user guides, theory manuals, etc., separate from the autogenerated API documentation",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#add-content-for-sphinx",
    "href": "documentation.html#add-content-for-sphinx",
    "title": "Documentation",
    "section": "Add content for Sphinx",
    "text": "Add content for Sphinx\n\nIn the docs\\source directory, add an installation.md file (for example)\nAdd 'myst_parser' to extensions in conf.py\nTry building with make html\nDid sphinx find and automatically build docs for your modules? Look for .md files for each module.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#configuration-conf.py",
    "href": "documentation.html#configuration-conf.py",
    "title": "Documentation",
    "section": "Configuration (conf.py)",
    "text": "Configuration (conf.py)\n\nAdd 'sphinx.ext.autodoc' to extensions\nIn extensions, add sphinx.ext.napoleon (for Google/NumPy-style docstring reading) and sphinx.ext.mathjax (if you want LaTeX-based equations), and sphinx.ext.intersphinx for connections to other docs\nSet napoleon_numpy_docstring and napoleon_google_docstring to True/False depending on your docstring style.\nAdd an intersphinx_mapping dict to connect to other docs",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#configuration",
    "href": "documentation.html#configuration",
    "title": "Documentation",
    "section": "Configuration",
    "text": "Configuration\n\nIn conf.py, add autodoc_default_options = {'members': True} and autoclass_content = 'class'\nFor each Python module, create a corresponding [modulename].rst file in the docs\\source directory. Add .. automodule:: [packagename].[modulename]\nIn index.rst, add [modulename] inside the toctree (table of contents)",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#intersphinx_mapping",
    "href": "documentation.html#intersphinx_mapping",
    "title": "Documentation",
    "section": "intersphinx_mapping",
    "text": "intersphinx_mapping\nintersphinx_mapping = {\n  'python': ('https://docs.python.org/3.11', None),\n  'pandas': ('http://pandas.pydata.org/pandas-docs/stable/', None),\n  'numpy': ('https://docs.scipy.org/doc/numpy/', None),\n}",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#other-sphinx-goodness",
    "href": "documentation.html#other-sphinx-goodness",
    "title": "Documentation",
    "section": "Other Sphinx goodness:",
    "text": "Other Sphinx goodness:\n\nYou can configure it to generate a LaTeX-based PDF (i.e., a single user manual)\nYou can have versioned documentation, and also simultaneously have “devel” docs for unreleased changes.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#github-actions-to-automate-sphinx",
    "href": "documentation.html#github-actions-to-automate-sphinx",
    "title": "Documentation",
    "section": "GitHub Actions to automate Sphinx",
    "text": "GitHub Actions to automate Sphinx\nname: \"Sphinx: Render docs\"\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - name: install depedendices\n      run : |\n        python -m pip install --upgrade pip\n        pip install .\n        pip install sphinx myst-parser\n    - name: Build HTML\n      run: |\n        cd docs\n        make html\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: html-docs\n        path: docs/build/html/\n    - name: Deploy\n      uses: peaceiris/actions-gh-pages@v4\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: docs/build/html",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#github-actions-setup",
    "href": "documentation.html#github-actions-setup",
    "title": "Documentation",
    "section": "GitHub Actions setup",
    "text": "GitHub Actions setup\n\nAdd sphinx.ext.githubpages to extensions in conf.py\nAdd a docs/requirements.txt file for any dependencies (e.g., myst-parser)\nOn GitHub, Settings -&gt; Pages -&gt; select gh-pages branch in the “Source” dropdown\n\n\nMore on Sphinx - GitHub Actions here: https://www.sphinx-doc.org/en/master/tutorial/deploying.html",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation-revealjs.html#documentation",
    "href": "documentation-revealjs.html#documentation",
    "title": "Documentation",
    "section": "Documentation",
    "text": "Documentation\nProfessor Carole Goble in “Better Software, Better Research”:\n\nOne of my favorite #overlyhonestmethods tweets (a hashtag for lab scientists) is Ian Holmes’s “You can download our code from the URL supplied. Good luck downloading the only postdoc who can get it to run, though.”"
  },
  {
    "objectID": "documentation-revealjs.html#value-of-documentation",
    "href": "documentation-revealjs.html#value-of-documentation",
    "title": "Documentation",
    "section": "Value of documentation",
    "text": "Value of documentation\n\nThe value and extent of your work is clearer if it can be understood by colleagues.\nDocumentation provides provenance for your scientific process, for your colleagues and yourself.\nDocumentation demonstrates your skill and professionalism."
  },
  {
    "objectID": "documentation-revealjs.html#documentation-is-easier-than-you-think.",
    "href": "documentation-revealjs.html#documentation-is-easier-than-you-think.",
    "title": "Documentation",
    "section": "Documentation is easier than you think.",
    "text": "Documentation is easier than you think.\n\nDocumentation pays for itself with the time it saves in the long run.\nDocumentation requires little effort beyond writing the software itself."
  },
  {
    "objectID": "documentation-revealjs.html#types-of-documentation",
    "href": "documentation-revealjs.html#types-of-documentation",
    "title": "Documentation",
    "section": "Types of documentation",
    "text": "Types of documentation\n\nTheory manuals\nUser and developer guides\nCode comments\nSelf-documenting code\nGenerated API documentation"
  },
  {
    "objectID": "documentation-revealjs.html#user-and-developer-guides",
    "href": "documentation-revealjs.html#user-and-developer-guides",
    "title": "Documentation",
    "section": "User and developer guides",
    "text": "User and developer guides\n\nREADME: sits in top-level directory and contains all the necessary information for installing, getting started with, and understanding the accompanying code.\n\n\nMay be accompanied by other specific files: LICENSE, INSTALL, CITATION, ABOUT, CHANGELOG, CONTRIBUTING"
  },
  {
    "objectID": "documentation-revealjs.html#readme-example",
    "href": "documentation-revealjs.html#readme-example",
    "title": "Documentation",
    "section": "README example",
    "text": "README example\nSQUIRREL, version 1.2 released on 2026-09-20\n\n# About\n\nThe Spectral Q and U Imaging Radiation Replicating Experimental Library\n(SQUIRREL) is a library for replicating radiation sources with spectral details\nand Q and U polarizations of superman bubblegum.\n\n# Installation\n\nThe SQUIRREL library relies on other libraries:\n\n- The ACORN library www.acorn.nutz\n- The TREEBRANCH database format API\n\nInstall those before installing the SQUIRREL library. To install the SQUIRREL\nlibrary:\n\n./configure\nmake --prefix=/install/path\nmake install\n..."
  },
  {
    "objectID": "documentation-revealjs.html#comments",
    "href": "documentation-revealjs.html#comments",
    "title": "Documentation",
    "section": "Comments",
    "text": "Comments\nComments provide a way to insert metainformation about code intended for people, right next to the code:\ndef the_function(var):\n    \"\"\"This is a docstring, where a function definition might live\"\"\"\n    a = 1 + var # this is a simple comment\n    return a"
  },
  {
    "objectID": "documentation-revealjs.html#bad-comments",
    "href": "documentation-revealjs.html#bad-comments",
    "title": "Documentation",
    "section": "Bad comments",
    "text": "Bad comments\nAlso possible to pollute code with unnecessary cruft:\ndef decay(index, database):\n    # first, retrieve the decay constants from the database\n    mylist = database.decay_constants()\n    # next, try to access an element of the list\n    try:\n        d = mylist[index] # gets decay constant at index in the list\n    # if the index doesn't exist\n    except IndexError:\n        # throw an informative error message\n        raise Exception(\"value not found in the list\")\n    return d"
  },
  {
    "objectID": "documentation-revealjs.html#useful-comments",
    "href": "documentation-revealjs.html#useful-comments",
    "title": "Documentation",
    "section": "Useful comments",
    "text": "Useful comments\nCode written cleanly will have its own voice. Use intelligent naming to make most lines of code clear without comments, then use comments sparingly to help explain reasons or complicated sections:\ndef get_decay(index, database):\n    \"\"\"Returns decay constant at index in the database\"\"\"\n    lambdas = database.decay_constants()\n    try:\n        lambda_i = lambdas[index] # gets decay constant at index in the list\n    except IndexError:\n        raise Exception(\"value not found in the list\")\n    return lambda"
  },
  {
    "objectID": "documentation-revealjs.html#self-documenting-code",
    "href": "documentation-revealjs.html#self-documenting-code",
    "title": "Documentation",
    "section": "Self-documenting code",
    "text": "Self-documenting code\n\nNaming: a class, variable, or function name should tell you why it exists, what it does, and how it is used.\n\n\nSimple functions: functions should be small to be understandable and testable; they should only do one thing.\n\n\nConsistent style: use a consistent, standardized style; e.g., select variable and function names according to the PEP8 style guide for Python."
  },
  {
    "objectID": "documentation-revealjs.html#guidelines-for-naming",
    "href": "documentation-revealjs.html#guidelines-for-naming",
    "title": "Documentation",
    "section": "Guidelines for naming",
    "text": "Guidelines for naming\n# packages and modules are short and lowercase\npackages\nmodules\n\n# other objects can be long\nClassesUseCamelCase\nExceptionsAreClassesToo\nfunctions_use_snake_case\nCONSTANTS_USE_ALL_CAPS\n\n# variable scope is *suggested* by style convention\n_single_leading_underscore_ # internal to module\nsingle_trailing_underscore_ # avoids conflicts with Python keywords\n__double_leading_trailing__ # these are magic, like __init__"
  },
  {
    "objectID": "documentation-revealjs.html#docstrings",
    "href": "documentation-revealjs.html#docstrings",
    "title": "Documentation",
    "section": "Docstrings",
    "text": "Docstrings\n\ndocstring: comment placed immediately after a function or class definition, typically enclosed by three pairs of double quotes:\n\ndef &lt;name&gt;(&lt;args&gt;):\n    \"\"\"&lt;docstring&gt;\"\"\"\n    &lt;body&gt;\n\ndocstrings are available within Python via help() and iPython’s magic command ?, and Sphinx picks them up."
  },
  {
    "objectID": "documentation-revealjs.html#docstrings-more",
    "href": "documentation-revealjs.html#docstrings-more",
    "title": "Documentation",
    "section": "Docstrings (more)",
    "text": "Docstrings (more)\n\nMake docstrings descriptive and concise; you can explain the arguments of a function, its behavior, and how you intend it to be used.\n\ndef power(base, x):\n    \"\"\"Computes base^x. Both base and x should be integers,\n    floats, or another numeric type.\n    \"\"\"\n    return base**x"
  },
  {
    "objectID": "documentation-revealjs.html#numpy-style-docstrings",
    "href": "documentation-revealjs.html#numpy-style-docstrings",
    "title": "Documentation",
    "section": "Numpy-style docstrings",
    "text": "Numpy-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The second parameter.\n\n    Returns\n    -------\n    bool\n        True if successful, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\""
  },
  {
    "objectID": "documentation-revealjs.html#google-style-docstrings",
    "href": "documentation-revealjs.html#google-style-docstrings",
    "title": "Documentation",
    "section": "Google-style docstrings",
    "text": "Google-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\""
  },
  {
    "objectID": "documentation-revealjs.html#getting-started-with-sphinx",
    "href": "documentation-revealjs.html#getting-started-with-sphinx",
    "title": "Documentation",
    "section": "Getting started with Sphinx",
    "text": "Getting started with Sphinx\n\npip install sphinx myst-parser\nmkdir docs\ncd docs\nsphinx-quickstart (accept defaults if unsure; answer “yes” for question about autodoc)\nsource directory holds .rst and .md files for user guides, theory manuals, etc., separate from the autogenerated API documentation"
  },
  {
    "objectID": "documentation-revealjs.html#add-content-for-sphinx",
    "href": "documentation-revealjs.html#add-content-for-sphinx",
    "title": "Documentation",
    "section": "Add content for Sphinx",
    "text": "Add content for Sphinx\n\nIn the docs\\source directory, add an installation.md file (for example)\nAdd 'myst_parser' to extensions in conf.py\nTry building with make html\nDid sphinx find and automatically build docs for your modules? Look for .md files for each module."
  },
  {
    "objectID": "documentation-revealjs.html#configuration-conf.py",
    "href": "documentation-revealjs.html#configuration-conf.py",
    "title": "Documentation",
    "section": "Configuration (conf.py)",
    "text": "Configuration (conf.py)\n\nAdd 'sphinx.ext.autodoc' to extensions\nIn extensions, add sphinx.ext.napoleon (for Google/NumPy-style docstring reading) and sphinx.ext.mathjax (if you want LaTeX-based equations), and sphinx.ext.intersphinx for connections to other docs\nSet napoleon_numpy_docstring and napoleon_google_docstring to True/False depending on your docstring style.\nAdd an intersphinx_mapping dict to connect to other docs"
  },
  {
    "objectID": "documentation-revealjs.html#configuration",
    "href": "documentation-revealjs.html#configuration",
    "title": "Documentation",
    "section": "Configuration",
    "text": "Configuration\n\nIn conf.py, add autodoc_default_options = {'members': True} and autoclass_content = 'class'\nFor each Python module, create a corresponding [modulename].rst file in the docs\\source directory. Add .. automodule:: [packagename].[modulename]\nIn index.rst, add [modulename] inside the toctree (table of contents)"
  },
  {
    "objectID": "documentation-revealjs.html#intersphinx_mapping",
    "href": "documentation-revealjs.html#intersphinx_mapping",
    "title": "Documentation",
    "section": "intersphinx_mapping",
    "text": "intersphinx_mapping\nintersphinx_mapping = {\n  'python': ('https://docs.python.org/3.11', None),\n  'pandas': ('http://pandas.pydata.org/pandas-docs/stable/', None),\n  'numpy': ('https://docs.scipy.org/doc/numpy/', None),\n}"
  },
  {
    "objectID": "documentation-revealjs.html#other-sphinx-goodness",
    "href": "documentation-revealjs.html#other-sphinx-goodness",
    "title": "Documentation",
    "section": "Other Sphinx goodness:",
    "text": "Other Sphinx goodness:\n\nYou can configure it to generate a LaTeX-based PDF (i.e., a single user manual)\nYou can have versioned documentation, and also simultaneously have “devel” docs for unreleased changes."
  },
  {
    "objectID": "documentation-revealjs.html#github-actions-to-automate-sphinx",
    "href": "documentation-revealjs.html#github-actions-to-automate-sphinx",
    "title": "Documentation",
    "section": "GitHub Actions to automate Sphinx",
    "text": "GitHub Actions to automate Sphinx\nname: \"Sphinx: Render docs\"\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - name: install depedendices\n      run : |\n        python -m pip install --upgrade pip\n        pip install .\n        pip install sphinx myst-parser\n    - name: Build HTML\n      run: |\n        cd docs\n        make html\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: html-docs\n        path: docs/build/html/\n    - name: Deploy\n      uses: peaceiris/actions-gh-pages@v4\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: docs/build/html"
  },
  {
    "objectID": "documentation-revealjs.html#github-actions-setup",
    "href": "documentation-revealjs.html#github-actions-setup",
    "title": "Documentation",
    "section": "GitHub Actions setup",
    "text": "GitHub Actions setup\n\nAdd sphinx.ext.githubpages to extensions in conf.py\nAdd a docs/requirements.txt file for any dependencies (e.g., myst-parser)\nOn GitHub, Settings -&gt; Pages -&gt; select gh-pages branch in the “Source” dropdown\n\n\nMore on Sphinx - GitHub Actions here: https://www.sphinx-doc.org/en/master/tutorial/deploying.html"
  }
]
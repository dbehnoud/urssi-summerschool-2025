[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Software and Open Science",
    "section": "",
    "text": "Welcome to the URSSI Summer School on Research Software and Open Science",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "Professor Carole Goble in “Better Software, Better Research”:\n\nOne of my favorite #overlyhonestmethods tweets (a hashtag for lab scientists) is Ian Holmes’s “You can download our code from the URL supplied. Good luck downloading the only postdoc who can get it to run, though.”\n\n\n\n\n\nThe value and extent of your work is clearer if it can be understood by colleagues.\nDocumentation provides provenance for your scientific process, for your colleagues and yourself.\nDocumentation demonstrates your skill and professionalism.\n\n\n\n\n\nDocumentation pays for itself with the time it saves in the long run.\nDocumentation requires little effort beyond writing the software itself.\n\n\n\n\n\nTheory manuals\nUser and developer guides\nCode comments\nSelf-documenting code\nGenerated API documentation\n\n\n\n\n\nREADME: sits in top-level directory and contains all the necessary information for installing, getting started with, and understanding the accompanying code.\n\n\nMay be accompanied by other specific files: LICENSE, INSTALL, CITATION, ABOUT, CHANGELOG, CONTRIBUTING\n\n\n\n\nSQUIRREL, version 1.2 released on 2026-09-20\n\n# About\n\nThe Spectral Q and U Imaging Radiation Replicating Experimental Library\n(SQUIRREL) is a library for replicating radiation sources with spectral details\nand Q and U polarizations of superman bubblegum.\n\n# Installation\n\nThe SQUIRREL library relies on other libraries:\n\n- The ACORN library www.acorn.nutz\n- The TREEBRANCH database format API\n\nInstall those before installing the SQUIRREL library. To install the SQUIRREL\nlibrary:\n\n./configure\nmake --prefix=/install/path\nmake install\n...\n\n\n\nComments provide a way to insert metainformation about code intended for people, right next to the code:\ndef the_function(var):\n    \"\"\"This is a docstring, where a function definition might live\"\"\"\n    a = 1 + var # this is a simple comment\n    return a\n\n\n\nAlso possible to pollute code with unnecessary cruft:\ndef decay(index, database):\n    # first, retrieve the decay constants from the database\n    mylist = database.decay_constants()\n    # next, try to access an element of the list\n    try:\n        d = mylist[index] # gets decay constant at index in the list\n    # if the index doesn't exist\n    except IndexError:\n        # throw an informative error message\n        raise Exception(\"value not found in the list\")\n    return d\n\n\n\nCode written cleanly will have its own voice. Use intelligent naming to make most lines of code clear without comments, then use comments sparingly to help explain reasons or complicated sections:\ndef get_decay(index, database):\n    \"\"\"Returns decay constant at index in the database\"\"\"\n    lambdas = database.decay_constants()\n    try:\n        lambda_i = lambdas[index] # gets decay constant at index in the list\n    except IndexError:\n        raise Exception(\"value not found in the list\")\n    return lambda\n\n\n\n\nNaming: a class, variable, or function name should tell you why it exists, what it does, and how it is used.\n\n\nSimple functions: functions should be small to be understandable and testable; they should only do one thing.\n\n\nConsistent style: use a consistent, standardized style; e.g., select variable and function names according to the PEP8 style guide for Python.\n\n\n\n\n# packages and modules are short and lowercase\npackages\nmodules\n\n# other objects can be long\nClassesUseCamelCase\nExceptionsAreClassesToo\nfunctions_use_snake_case\nCONSTANTS_USE_ALL_CAPS\n\n# variable scope is *suggested* by style convention\n_single_leading_underscore_ # internal to module\nsingle_trailing_underscore_ # avoids conflicts with Python keywords\n__double_leading_trailing__ # these are magic, like __init__\n\n\n\n\ndocstring: comment placed immediately after a function or class definition, typically enclosed by three pairs of double quotes:\n\ndef &lt;name&gt;(&lt;args&gt;):\n    \"\"\"&lt;docstring&gt;\"\"\"\n    &lt;body&gt;\n\ndocstrings are available within Python via help() and iPython’s magic command ?, and Sphinx picks them up.\n\n\n\n\n\nMake docstrings descriptive and concise; you can explain the arguments of a function, its behavior, and how you intend it to be used.\n\ndef power(base, x):\n    \"\"\"Computes base^x. Both base and x should be integers,\n    floats, or another numeric type.\n    \"\"\"\n    return base**x",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#documentation",
    "href": "documentation.html#documentation",
    "title": "Documentation",
    "section": "",
    "text": "Professor Carole Goble in “Better Software, Better Research”:\n\nOne of my favorite #overlyhonestmethods tweets (a hashtag for lab scientists) is Ian Holmes’s “You can download our code from the URL supplied. Good luck downloading the only postdoc who can get it to run, though.”",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#value-of-documentation",
    "href": "documentation.html#value-of-documentation",
    "title": "Documentation",
    "section": "",
    "text": "The value and extent of your work is clearer if it can be understood by colleagues.\nDocumentation provides provenance for your scientific process, for your colleagues and yourself.\nDocumentation demonstrates your skill and professionalism.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#documentation-is-easier-than-you-think.",
    "href": "documentation.html#documentation-is-easier-than-you-think.",
    "title": "Documentation",
    "section": "",
    "text": "Documentation pays for itself with the time it saves in the long run.\nDocumentation requires little effort beyond writing the software itself.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#types-of-documentation",
    "href": "documentation.html#types-of-documentation",
    "title": "Documentation",
    "section": "",
    "text": "Theory manuals\nUser and developer guides\nCode comments\nSelf-documenting code\nGenerated API documentation",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#user-and-developer-guides",
    "href": "documentation.html#user-and-developer-guides",
    "title": "Documentation",
    "section": "",
    "text": "README: sits in top-level directory and contains all the necessary information for installing, getting started with, and understanding the accompanying code.\n\n\nMay be accompanied by other specific files: LICENSE, INSTALL, CITATION, ABOUT, CHANGELOG, CONTRIBUTING",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#readme-example",
    "href": "documentation.html#readme-example",
    "title": "Documentation",
    "section": "",
    "text": "SQUIRREL, version 1.2 released on 2026-09-20\n\n# About\n\nThe Spectral Q and U Imaging Radiation Replicating Experimental Library\n(SQUIRREL) is a library for replicating radiation sources with spectral details\nand Q and U polarizations of superman bubblegum.\n\n# Installation\n\nThe SQUIRREL library relies on other libraries:\n\n- The ACORN library www.acorn.nutz\n- The TREEBRANCH database format API\n\nInstall those before installing the SQUIRREL library. To install the SQUIRREL\nlibrary:\n\n./configure\nmake --prefix=/install/path\nmake install\n...",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#comments",
    "href": "documentation.html#comments",
    "title": "Documentation",
    "section": "",
    "text": "Comments provide a way to insert metainformation about code intended for people, right next to the code:\ndef the_function(var):\n    \"\"\"This is a docstring, where a function definition might live\"\"\"\n    a = 1 + var # this is a simple comment\n    return a",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#bad-comments",
    "href": "documentation.html#bad-comments",
    "title": "Documentation",
    "section": "",
    "text": "Also possible to pollute code with unnecessary cruft:\ndef decay(index, database):\n    # first, retrieve the decay constants from the database\n    mylist = database.decay_constants()\n    # next, try to access an element of the list\n    try:\n        d = mylist[index] # gets decay constant at index in the list\n    # if the index doesn't exist\n    except IndexError:\n        # throw an informative error message\n        raise Exception(\"value not found in the list\")\n    return d",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#useful-comments",
    "href": "documentation.html#useful-comments",
    "title": "Documentation",
    "section": "",
    "text": "Code written cleanly will have its own voice. Use intelligent naming to make most lines of code clear without comments, then use comments sparingly to help explain reasons or complicated sections:\ndef get_decay(index, database):\n    \"\"\"Returns decay constant at index in the database\"\"\"\n    lambdas = database.decay_constants()\n    try:\n        lambda_i = lambdas[index] # gets decay constant at index in the list\n    except IndexError:\n        raise Exception(\"value not found in the list\")\n    return lambda",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#self-documenting-code",
    "href": "documentation.html#self-documenting-code",
    "title": "Documentation",
    "section": "",
    "text": "Naming: a class, variable, or function name should tell you why it exists, what it does, and how it is used.\n\n\nSimple functions: functions should be small to be understandable and testable; they should only do one thing.\n\n\nConsistent style: use a consistent, standardized style; e.g., select variable and function names according to the PEP8 style guide for Python.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#guidelines-for-naming",
    "href": "documentation.html#guidelines-for-naming",
    "title": "Documentation",
    "section": "",
    "text": "# packages and modules are short and lowercase\npackages\nmodules\n\n# other objects can be long\nClassesUseCamelCase\nExceptionsAreClassesToo\nfunctions_use_snake_case\nCONSTANTS_USE_ALL_CAPS\n\n# variable scope is *suggested* by style convention\n_single_leading_underscore_ # internal to module\nsingle_trailing_underscore_ # avoids conflicts with Python keywords\n__double_leading_trailing__ # these are magic, like __init__",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#docstrings",
    "href": "documentation.html#docstrings",
    "title": "Documentation",
    "section": "",
    "text": "docstring: comment placed immediately after a function or class definition, typically enclosed by three pairs of double quotes:\n\ndef &lt;name&gt;(&lt;args&gt;):\n    \"\"\"&lt;docstring&gt;\"\"\"\n    &lt;body&gt;\n\ndocstrings are available within Python via help() and iPython’s magic command ?, and Sphinx picks them up.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#docstrings-more",
    "href": "documentation.html#docstrings-more",
    "title": "Documentation",
    "section": "",
    "text": "Make docstrings descriptive and concise; you can explain the arguments of a function, its behavior, and how you intend it to be used.\n\ndef power(base, x):\n    \"\"\"Computes base^x. Both base and x should be integers,\n    floats, or another numeric type.\n    \"\"\"\n    return base**x",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#numpy-style-docstrings",
    "href": "documentation.html#numpy-style-docstrings",
    "title": "Documentation",
    "section": "Numpy-style docstrings",
    "text": "Numpy-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The second parameter.\n\n    Returns\n    -------\n    bool\n        True if successful, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#google-style-docstrings",
    "href": "documentation.html#google-style-docstrings",
    "title": "Documentation",
    "section": "Google-style docstrings",
    "text": "Google-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#getting-started-with-sphinx",
    "href": "documentation.html#getting-started-with-sphinx",
    "title": "Documentation",
    "section": "Getting started with Sphinx",
    "text": "Getting started with Sphinx\n\npip install sphinx myst-parser\nmkdir docs\ncd docs\nsphinx-quickstart (accept defaults if unsure; answer “yes” for question about autodoc)\nsource directory holds .rst and .md files for user guides, theory manuals, etc., separate from the autogenerated API documentation",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#add-content-for-sphinx",
    "href": "documentation.html#add-content-for-sphinx",
    "title": "Documentation",
    "section": "Add content for Sphinx",
    "text": "Add content for Sphinx\n\nIn the docs\\source directory, add an installation.md file (for example)\nAdd 'myst_parser' to extensions in conf.py\nTry building with make html\nDid sphinx find and automatically build docs for your modules? Look for .md files for each module.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#configuration-conf.py",
    "href": "documentation.html#configuration-conf.py",
    "title": "Documentation",
    "section": "Configuration (conf.py)",
    "text": "Configuration (conf.py)\n\nAdd 'sphinx.ext.autodoc' to extensions\nIn extensions, add sphinx.ext.napoleon (for Google/NumPy-style docstring reading) and sphinx.ext.mathjax (if you want LaTeX-based equations), and sphinx.ext.intersphinx for connections to other docs\nSet napoleon_numpy_docstring and napoleon_google_docstring to True/False depending on your docstring style.\nAdd an intersphinx_mapping dict to connect to other docs",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#configuration",
    "href": "documentation.html#configuration",
    "title": "Documentation",
    "section": "Configuration",
    "text": "Configuration\n\nIn conf.py, add autodoc_default_options = {'members': True} and autoclass_content = 'class'\nFor each Python module, create a corresponding [modulename].rst file in the docs\\source directory. Add .. automodule:: [packagename].[modulename]\nIn index.rst, add [modulename] inside the toctree (table of contents)",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#intersphinx_mapping",
    "href": "documentation.html#intersphinx_mapping",
    "title": "Documentation",
    "section": "intersphinx_mapping",
    "text": "intersphinx_mapping\nintersphinx_mapping = {\n  'python': ('https://docs.python.org/3.11', None),\n  'pandas': ('http://pandas.pydata.org/pandas-docs/stable/', None),\n  'numpy': ('https://docs.scipy.org/doc/numpy/', None),\n}",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#other-sphinx-goodness",
    "href": "documentation.html#other-sphinx-goodness",
    "title": "Documentation",
    "section": "Other Sphinx goodness:",
    "text": "Other Sphinx goodness:\n\nYou can configure it to generate a LaTeX-based PDF (i.e., a single user manual)\nYou can have versioned documentation, and also simultaneously have “devel” docs for unreleased changes.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#github-actions-to-automate-sphinx",
    "href": "documentation.html#github-actions-to-automate-sphinx",
    "title": "Documentation",
    "section": "GitHub Actions to automate Sphinx",
    "text": "GitHub Actions to automate Sphinx\nname: \"Sphinx: Render docs\"\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - name: install depedendices\n      run : |\n        python -m pip install --upgrade pip\n        pip install .\n        pip install sphinx myst-parser\n    - name: Build HTML\n      run: |\n        cd docs\n        make html\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: html-docs\n        path: docs/build/html/\n    - name: Deploy\n      uses: peaceiris/actions-gh-pages@v4\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: docs/build/html",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#github-actions-setup",
    "href": "documentation.html#github-actions-setup",
    "title": "Documentation",
    "section": "GitHub Actions setup",
    "text": "GitHub Actions setup\n\nAdd sphinx.ext.githubpages to extensions in conf.py\nAdd a docs/requirements.txt file for any dependencies (e.g., myst-parser)\nOn GitHub, Settings -&gt; Pages -&gt; select gh-pages branch in the “Source” dropdown\n\n\nMore on Sphinx - GitHub Actions here: https://www.sphinx-doc.org/en/master/tutorial/deploying.html",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "documentation-revealjs.html#documentation",
    "href": "documentation-revealjs.html#documentation",
    "title": "Documentation",
    "section": "Documentation",
    "text": "Documentation\nProfessor Carole Goble in “Better Software, Better Research”:\n\nOne of my favorite #overlyhonestmethods tweets (a hashtag for lab scientists) is Ian Holmes’s “You can download our code from the URL supplied. Good luck downloading the only postdoc who can get it to run, though.”"
  },
  {
    "objectID": "documentation-revealjs.html#value-of-documentation",
    "href": "documentation-revealjs.html#value-of-documentation",
    "title": "Documentation",
    "section": "Value of documentation",
    "text": "Value of documentation\n\nThe value and extent of your work is clearer if it can be understood by colleagues.\nDocumentation provides provenance for your scientific process, for your colleagues and yourself.\nDocumentation demonstrates your skill and professionalism."
  },
  {
    "objectID": "documentation-revealjs.html#documentation-is-easier-than-you-think.",
    "href": "documentation-revealjs.html#documentation-is-easier-than-you-think.",
    "title": "Documentation",
    "section": "Documentation is easier than you think.",
    "text": "Documentation is easier than you think.\n\nDocumentation pays for itself with the time it saves in the long run.\nDocumentation requires little effort beyond writing the software itself."
  },
  {
    "objectID": "documentation-revealjs.html#types-of-documentation",
    "href": "documentation-revealjs.html#types-of-documentation",
    "title": "Documentation",
    "section": "Types of documentation",
    "text": "Types of documentation\n\nTheory manuals\nUser and developer guides\nCode comments\nSelf-documenting code\nGenerated API documentation"
  },
  {
    "objectID": "documentation-revealjs.html#user-and-developer-guides",
    "href": "documentation-revealjs.html#user-and-developer-guides",
    "title": "Documentation",
    "section": "User and developer guides",
    "text": "User and developer guides\n\nREADME: sits in top-level directory and contains all the necessary information for installing, getting started with, and understanding the accompanying code.\n\n\nMay be accompanied by other specific files: LICENSE, INSTALL, CITATION, ABOUT, CHANGELOG, CONTRIBUTING"
  },
  {
    "objectID": "documentation-revealjs.html#readme-example",
    "href": "documentation-revealjs.html#readme-example",
    "title": "Documentation",
    "section": "README example",
    "text": "README example\nSQUIRREL, version 1.2 released on 2026-09-20\n\n# About\n\nThe Spectral Q and U Imaging Radiation Replicating Experimental Library\n(SQUIRREL) is a library for replicating radiation sources with spectral details\nand Q and U polarizations of superman bubblegum.\n\n# Installation\n\nThe SQUIRREL library relies on other libraries:\n\n- The ACORN library www.acorn.nutz\n- The TREEBRANCH database format API\n\nInstall those before installing the SQUIRREL library. To install the SQUIRREL\nlibrary:\n\n./configure\nmake --prefix=/install/path\nmake install\n..."
  },
  {
    "objectID": "documentation-revealjs.html#comments",
    "href": "documentation-revealjs.html#comments",
    "title": "Documentation",
    "section": "Comments",
    "text": "Comments\nComments provide a way to insert metainformation about code intended for people, right next to the code:\ndef the_function(var):\n    \"\"\"This is a docstring, where a function definition might live\"\"\"\n    a = 1 + var # this is a simple comment\n    return a"
  },
  {
    "objectID": "documentation-revealjs.html#bad-comments",
    "href": "documentation-revealjs.html#bad-comments",
    "title": "Documentation",
    "section": "Bad comments",
    "text": "Bad comments\nAlso possible to pollute code with unnecessary cruft:\ndef decay(index, database):\n    # first, retrieve the decay constants from the database\n    mylist = database.decay_constants()\n    # next, try to access an element of the list\n    try:\n        d = mylist[index] # gets decay constant at index in the list\n    # if the index doesn't exist\n    except IndexError:\n        # throw an informative error message\n        raise Exception(\"value not found in the list\")\n    return d"
  },
  {
    "objectID": "documentation-revealjs.html#useful-comments",
    "href": "documentation-revealjs.html#useful-comments",
    "title": "Documentation",
    "section": "Useful comments",
    "text": "Useful comments\nCode written cleanly will have its own voice. Use intelligent naming to make most lines of code clear without comments, then use comments sparingly to help explain reasons or complicated sections:\ndef get_decay(index, database):\n    \"\"\"Returns decay constant at index in the database\"\"\"\n    lambdas = database.decay_constants()\n    try:\n        lambda_i = lambdas[index] # gets decay constant at index in the list\n    except IndexError:\n        raise Exception(\"value not found in the list\")\n    return lambda"
  },
  {
    "objectID": "documentation-revealjs.html#self-documenting-code",
    "href": "documentation-revealjs.html#self-documenting-code",
    "title": "Documentation",
    "section": "Self-documenting code",
    "text": "Self-documenting code\n\nNaming: a class, variable, or function name should tell you why it exists, what it does, and how it is used.\n\n\nSimple functions: functions should be small to be understandable and testable; they should only do one thing.\n\n\nConsistent style: use a consistent, standardized style; e.g., select variable and function names according to the PEP8 style guide for Python."
  },
  {
    "objectID": "documentation-revealjs.html#guidelines-for-naming",
    "href": "documentation-revealjs.html#guidelines-for-naming",
    "title": "Documentation",
    "section": "Guidelines for naming",
    "text": "Guidelines for naming\n# packages and modules are short and lowercase\npackages\nmodules\n\n# other objects can be long\nClassesUseCamelCase\nExceptionsAreClassesToo\nfunctions_use_snake_case\nCONSTANTS_USE_ALL_CAPS\n\n# variable scope is *suggested* by style convention\n_single_leading_underscore_ # internal to module\nsingle_trailing_underscore_ # avoids conflicts with Python keywords\n__double_leading_trailing__ # these are magic, like __init__"
  },
  {
    "objectID": "documentation-revealjs.html#docstrings",
    "href": "documentation-revealjs.html#docstrings",
    "title": "Documentation",
    "section": "Docstrings",
    "text": "Docstrings\n\ndocstring: comment placed immediately after a function or class definition, typically enclosed by three pairs of double quotes:\n\ndef &lt;name&gt;(&lt;args&gt;):\n    \"\"\"&lt;docstring&gt;\"\"\"\n    &lt;body&gt;\n\ndocstrings are available within Python via help() and iPython’s magic command ?, and Sphinx picks them up."
  },
  {
    "objectID": "documentation-revealjs.html#docstrings-more",
    "href": "documentation-revealjs.html#docstrings-more",
    "title": "Documentation",
    "section": "Docstrings (more)",
    "text": "Docstrings (more)\n\nMake docstrings descriptive and concise; you can explain the arguments of a function, its behavior, and how you intend it to be used.\n\ndef power(base, x):\n    \"\"\"Computes base^x. Both base and x should be integers,\n    floats, or another numeric type.\n    \"\"\"\n    return base**x"
  },
  {
    "objectID": "documentation-revealjs.html#numpy-style-docstrings",
    "href": "documentation-revealjs.html#numpy-style-docstrings",
    "title": "Documentation",
    "section": "Numpy-style docstrings",
    "text": "Numpy-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The second parameter.\n\n    Returns\n    -------\n    bool\n        True if successful, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\""
  },
  {
    "objectID": "documentation-revealjs.html#google-style-docstrings",
    "href": "documentation-revealjs.html#google-style-docstrings",
    "title": "Documentation",
    "section": "Google-style docstrings",
    "text": "Google-style docstrings\ndef function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\""
  },
  {
    "objectID": "documentation-revealjs.html#getting-started-with-sphinx",
    "href": "documentation-revealjs.html#getting-started-with-sphinx",
    "title": "Documentation",
    "section": "Getting started with Sphinx",
    "text": "Getting started with Sphinx\n\npip install sphinx myst-parser\nmkdir docs\ncd docs\nsphinx-quickstart (accept defaults if unsure; answer “yes” for question about autodoc)\nsource directory holds .rst and .md files for user guides, theory manuals, etc., separate from the autogenerated API documentation"
  },
  {
    "objectID": "documentation-revealjs.html#add-content-for-sphinx",
    "href": "documentation-revealjs.html#add-content-for-sphinx",
    "title": "Documentation",
    "section": "Add content for Sphinx",
    "text": "Add content for Sphinx\n\nIn the docs\\source directory, add an installation.md file (for example)\nAdd 'myst_parser' to extensions in conf.py\nTry building with make html\nDid sphinx find and automatically build docs for your modules? Look for .md files for each module."
  },
  {
    "objectID": "documentation-revealjs.html#configuration-conf.py",
    "href": "documentation-revealjs.html#configuration-conf.py",
    "title": "Documentation",
    "section": "Configuration (conf.py)",
    "text": "Configuration (conf.py)\n\nAdd 'sphinx.ext.autodoc' to extensions\nIn extensions, add sphinx.ext.napoleon (for Google/NumPy-style docstring reading) and sphinx.ext.mathjax (if you want LaTeX-based equations), and sphinx.ext.intersphinx for connections to other docs\nSet napoleon_numpy_docstring and napoleon_google_docstring to True/False depending on your docstring style.\nAdd an intersphinx_mapping dict to connect to other docs"
  },
  {
    "objectID": "documentation-revealjs.html#configuration",
    "href": "documentation-revealjs.html#configuration",
    "title": "Documentation",
    "section": "Configuration",
    "text": "Configuration\n\nIn conf.py, add autodoc_default_options = {'members': True} and autoclass_content = 'class'\nFor each Python module, create a corresponding [modulename].rst file in the docs\\source directory. Add .. automodule:: [packagename].[modulename]\nIn index.rst, add [modulename] inside the toctree (table of contents)"
  },
  {
    "objectID": "documentation-revealjs.html#intersphinx_mapping",
    "href": "documentation-revealjs.html#intersphinx_mapping",
    "title": "Documentation",
    "section": "intersphinx_mapping",
    "text": "intersphinx_mapping\nintersphinx_mapping = {\n  'python': ('https://docs.python.org/3.11', None),\n  'pandas': ('http://pandas.pydata.org/pandas-docs/stable/', None),\n  'numpy': ('https://docs.scipy.org/doc/numpy/', None),\n}"
  },
  {
    "objectID": "documentation-revealjs.html#other-sphinx-goodness",
    "href": "documentation-revealjs.html#other-sphinx-goodness",
    "title": "Documentation",
    "section": "Other Sphinx goodness:",
    "text": "Other Sphinx goodness:\n\nYou can configure it to generate a LaTeX-based PDF (i.e., a single user manual)\nYou can have versioned documentation, and also simultaneously have “devel” docs for unreleased changes."
  },
  {
    "objectID": "documentation-revealjs.html#github-actions-to-automate-sphinx",
    "href": "documentation-revealjs.html#github-actions-to-automate-sphinx",
    "title": "Documentation",
    "section": "GitHub Actions to automate Sphinx",
    "text": "GitHub Actions to automate Sphinx\nname: \"Sphinx: Render docs\"\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - name: install depedendices\n      run : |\n        python -m pip install --upgrade pip\n        pip install .\n        pip install sphinx myst-parser\n    - name: Build HTML\n      run: |\n        cd docs\n        make html\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: html-docs\n        path: docs/build/html/\n    - name: Deploy\n      uses: peaceiris/actions-gh-pages@v4\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: docs/build/html"
  },
  {
    "objectID": "documentation-revealjs.html#github-actions-setup",
    "href": "documentation-revealjs.html#github-actions-setup",
    "title": "Documentation",
    "section": "GitHub Actions setup",
    "text": "GitHub Actions setup\n\nAdd sphinx.ext.githubpages to extensions in conf.py\nAdd a docs/requirements.txt file for any dependencies (e.g., myst-parser)\nOn GitHub, Settings -&gt; Pages -&gt; select gh-pages branch in the “Source” dropdown\n\n\nMore on Sphinx - GitHub Actions here: https://www.sphinx-doc.org/en/master/tutorial/deploying.html"
  }
]